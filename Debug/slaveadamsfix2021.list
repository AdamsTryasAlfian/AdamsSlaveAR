
slaveadamsfix2021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005948  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af0  08005af0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af8  08005af8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000006ec  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000748  20000748  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010df1  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002473  00000000  00000000  00030e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  000332f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c98  00000000  00000000  00034080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218a4  00000000  00000000  00034d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109ab  00000000  00000000  000565bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb197  00000000  00000000  00066f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001320fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000375c  00000000  00000000  00132154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ab8 	.word	0x08005ab8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08005ab8 	.word	0x08005ab8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <BuzzerBuzz>:


uint8_t onOffTimer = 0;
uint16_t timerCounter = 0;

void BuzzerBuzz(int time, int number){
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]

	buzzerStatus = 1;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <BuzzerBuzz+0x38>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	701a      	strb	r2, [r3, #0]
	buzzerIteration = 0;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <BuzzerBuzz+0x3c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	801a      	strh	r2, [r3, #0]
	buzzerTime = time;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	b21a      	sxth	r2, r3
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <BuzzerBuzz+0x40>)
 80004dc:	801a      	strh	r2, [r3, #0]
	buzzerNumber = number * 2;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	b21a      	sxth	r2, r3
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <BuzzerBuzz+0x44>)
 80004ea:	801a      	strh	r2, [r3, #0]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	20000078 	.word	0x20000078
 80004fc:	2000007a 	.word	0x2000007a
 8000500:	2000007c 	.word	0x2000007c
 8000504:	2000007e 	.word	0x2000007e

08000508 <BuzzerRoutine>:

void BuzzerRoutine(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

	if(buzzerStatus == SET && buzzerNumber != 0)
 800050c:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <BuzzerRoutine+0xb8>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d127      	bne.n	8000564 <BuzzerRoutine+0x5c>
 8000514:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <BuzzerRoutine+0xbc>)
 8000516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d022      	beq.n	8000564 <BuzzerRoutine+0x5c>
	{
		//GPIO_ResetBits(GPIOD, GPIO_Pin_0);
		HAL_GPIO_WritePin(buzzer_GPIO_Port,buzzer_Pin,GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2110      	movs	r1, #16
 8000522:	4829      	ldr	r0, [pc, #164]	; (80005c8 <BuzzerRoutine+0xc0>)
 8000524:	f002 fdc2 	bl	80030ac <HAL_GPIO_WritePin>
		if(buzzerIteration++ == buzzerTime){
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <BuzzerRoutine+0xc4>)
 800052a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800052e:	b29a      	uxth	r2, r3
 8000530:	3201      	adds	r2, #1
 8000532:	b292      	uxth	r2, r2
 8000534:	b211      	sxth	r1, r2
 8000536:	4a25      	ldr	r2, [pc, #148]	; (80005cc <BuzzerRoutine+0xc4>)
 8000538:	8011      	strh	r1, [r2, #0]
 800053a:	4a25      	ldr	r2, [pc, #148]	; (80005d0 <BuzzerRoutine+0xc8>)
 800053c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000540:	4293      	cmp	r3, r2
 8000542:	d13b      	bne.n	80005bc <BuzzerRoutine+0xb4>
			buzzerIteration = 0;
 8000544:	4b21      	ldr	r3, [pc, #132]	; (80005cc <BuzzerRoutine+0xc4>)
 8000546:	2200      	movs	r2, #0
 8000548:	801a      	strh	r2, [r3, #0]
			buzzerStatus = RESET;
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <BuzzerRoutine+0xb8>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
			buzzerNumber--;
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <BuzzerRoutine+0xbc>)
 8000552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000556:	b29b      	uxth	r3, r3
 8000558:	3b01      	subs	r3, #1
 800055a:	b29b      	uxth	r3, r3
 800055c:	b21a      	sxth	r2, r3
 800055e:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <BuzzerRoutine+0xbc>)
 8000560:	801a      	strh	r2, [r3, #0]
		if(buzzerIteration++ == buzzerTime){
 8000562:	e02b      	b.n	80005bc <BuzzerRoutine+0xb4>
		}
	}
	else if(buzzerStatus == RESET && buzzerNumber != 0)
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <BuzzerRoutine+0xb8>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d127      	bne.n	80005bc <BuzzerRoutine+0xb4>
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <BuzzerRoutine+0xbc>)
 800056e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d022      	beq.n	80005bc <BuzzerRoutine+0xb4>
	{
		//GPIO_SetBits(GPIOD, GPIO_Pin_0);
		HAL_GPIO_WritePin(buzzer_GPIO_Port,buzzer_Pin,GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2110      	movs	r1, #16
 800057a:	4813      	ldr	r0, [pc, #76]	; (80005c8 <BuzzerRoutine+0xc0>)
 800057c:	f002 fd96 	bl	80030ac <HAL_GPIO_WritePin>
		if(buzzerIteration++ == buzzerTime){
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <BuzzerRoutine+0xc4>)
 8000582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000586:	b29a      	uxth	r2, r3
 8000588:	3201      	adds	r2, #1
 800058a:	b292      	uxth	r2, r2
 800058c:	b211      	sxth	r1, r2
 800058e:	4a0f      	ldr	r2, [pc, #60]	; (80005cc <BuzzerRoutine+0xc4>)
 8000590:	8011      	strh	r1, [r2, #0]
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <BuzzerRoutine+0xc8>)
 8000594:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000598:	4293      	cmp	r3, r2
 800059a:	d10f      	bne.n	80005bc <BuzzerRoutine+0xb4>
			buzzerIteration = 0;
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <BuzzerRoutine+0xc4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	801a      	strh	r2, [r3, #0]
			buzzerStatus = SET;
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <BuzzerRoutine+0xb8>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	701a      	strb	r2, [r3, #0]
			buzzerNumber--;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <BuzzerRoutine+0xbc>)
 80005aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	3b01      	subs	r3, #1
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	b21a      	sxth	r2, r3
 80005b6:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <BuzzerRoutine+0xbc>)
 80005b8:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80005ba:	e7ff      	b.n	80005bc <BuzzerRoutine+0xb4>
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000078 	.word	0x20000078
 80005c4:	2000007e 	.word	0x2000007e
 80005c8:	40020000 	.word	0x40020000
 80005cc:	2000007a 	.word	0x2000007a
 80005d0:	2000007c 	.word	0x2000007c

080005d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b27      	ldr	r3, [pc, #156]	; (800067c <MX_DMA_Init+0xa8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a26      	ldr	r2, [pc, #152]	; (800067c <MX_DMA_Init+0xa8>)
 80005e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <MX_DMA_Init+0xa8>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_DMA_Init+0xa8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a1f      	ldr	r2, [pc, #124]	; (800067c <MX_DMA_Init+0xa8>)
 8000600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_DMA_Init+0xa8>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	200c      	movs	r0, #12
 8000618:	f001 ff73 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061c:	200c      	movs	r0, #12
 800061e:	f001 ff8c 	bl	800253a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	200e      	movs	r0, #14
 8000628:	f001 ff6b 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800062c:	200e      	movs	r0, #14
 800062e:	f001 ff84 	bl	800253a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	2010      	movs	r0, #16
 8000638:	f001 ff63 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800063c:	2010      	movs	r0, #16
 800063e:	f001 ff7c 	bl	800253a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2011      	movs	r0, #17
 8000648:	f001 ff5b 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800064c:	2011      	movs	r0, #17
 800064e:	f001 ff74 	bl	800253a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	203a      	movs	r0, #58	; 0x3a
 8000658:	f001 ff53 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800065c:	203a      	movs	r0, #58	; 0x3a
 800065e:	f001 ff6c 	bl	800253a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	2046      	movs	r0, #70	; 0x46
 8000668:	f001 ff4b 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800066c:	2046      	movs	r0, #70	; 0x46
 800066e:	f001 ff64 	bl	800253a <HAL_NVIC_EnableIRQ>

}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800

08000680 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	; 0x30
 8000684:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
 800069a:	4b5b      	ldr	r3, [pc, #364]	; (8000808 <MX_GPIO_Init+0x188>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a5a      	ldr	r2, [pc, #360]	; (8000808 <MX_GPIO_Init+0x188>)
 80006a0:	f043 0310 	orr.w	r3, r3, #16
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b58      	ldr	r3, [pc, #352]	; (8000808 <MX_GPIO_Init+0x188>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0310 	and.w	r3, r3, #16
 80006ae:	61bb      	str	r3, [r7, #24]
 80006b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	4b54      	ldr	r3, [pc, #336]	; (8000808 <MX_GPIO_Init+0x188>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a53      	ldr	r2, [pc, #332]	; (8000808 <MX_GPIO_Init+0x188>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b51      	ldr	r3, [pc, #324]	; (8000808 <MX_GPIO_Init+0x188>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b4d      	ldr	r3, [pc, #308]	; (8000808 <MX_GPIO_Init+0x188>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a4c      	ldr	r2, [pc, #304]	; (8000808 <MX_GPIO_Init+0x188>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b4a      	ldr	r3, [pc, #296]	; (8000808 <MX_GPIO_Init+0x188>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b46      	ldr	r3, [pc, #280]	; (8000808 <MX_GPIO_Init+0x188>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a45      	ldr	r2, [pc, #276]	; (8000808 <MX_GPIO_Init+0x188>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b43      	ldr	r3, [pc, #268]	; (8000808 <MX_GPIO_Init+0x188>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <MX_GPIO_Init+0x188>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a3e      	ldr	r2, [pc, #248]	; (8000808 <MX_GPIO_Init+0x188>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <MX_GPIO_Init+0x188>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b38      	ldr	r3, [pc, #224]	; (8000808 <MX_GPIO_Init+0x188>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a37      	ldr	r2, [pc, #220]	; (8000808 <MX_GPIO_Init+0x188>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b35      	ldr	r3, [pc, #212]	; (8000808 <MX_GPIO_Init+0x188>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzer_Pin|portDir2Motor2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2130      	movs	r1, #48	; 0x30
 8000742:	4832      	ldr	r0, [pc, #200]	; (800080c <MX_GPIO_Init+0x18c>)
 8000744:	f002 fcb2 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, portDir1Motor0_Pin|portDir2Motor0_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2130      	movs	r1, #48	; 0x30
 800074c:	4830      	ldr	r0, [pc, #192]	; (8000810 <MX_GPIO_Init+0x190>)
 800074e:	f002 fcad 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, portDir1Motor1_Pin|portDir2Motor1_Pin|portDir1Motor3_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2107      	movs	r1, #7
 8000756:	482f      	ldr	r0, [pc, #188]	; (8000814 <MX_GPIO_Init+0x194>)
 8000758:	f002 fca8 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(portDir2Motor3_GPIO_Port, portDir2Motor3_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	482d      	ldr	r0, [pc, #180]	; (8000818 <MX_GPIO_Init+0x198>)
 8000762:	f002 fca3 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(portDir1Motor2_GPIO_Port, portDir1Motor2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	482b      	ldr	r0, [pc, #172]	; (800081c <MX_GPIO_Init+0x19c>)
 800076e:	f002 fc9d 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = buzzer_Pin|portDir2Motor2_Pin;
 8000772:	2330      	movs	r3, #48	; 0x30
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4820      	ldr	r0, [pc, #128]	; (800080c <MX_GPIO_Init+0x18c>)
 800078a:	f002 faf3 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = portDir1Motor0_Pin|portDir2Motor0_Pin;
 800078e:	2330      	movs	r3, #48	; 0x30
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	481a      	ldr	r0, [pc, #104]	; (8000810 <MX_GPIO_Init+0x190>)
 80007a6:	f002 fae5 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = portDir1Motor1_Pin|portDir2Motor1_Pin|portDir1Motor3_Pin;
 80007aa:	2307      	movs	r3, #7
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4814      	ldr	r0, [pc, #80]	; (8000814 <MX_GPIO_Init+0x194>)
 80007c2:	f002 fad7 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = portDir2Motor3_Pin;
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(portDir2Motor3_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	480e      	ldr	r0, [pc, #56]	; (8000818 <MX_GPIO_Init+0x198>)
 80007de:	f002 fac9 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = portDir1Motor2_Pin;
 80007e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(portDir1Motor2_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <MX_GPIO_Init+0x19c>)
 80007fc:	f002 faba 	bl	8002d74 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3730      	adds	r7, #48	; 0x30
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000
 8000810:	40020800 	.word	0x40020800
 8000814:	40020400 	.word	0x40020400
 8000818:	40021000 	.word	0x40021000
 800081c:	40020c00 	.word	0x40020c00

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f001 fd20 	bl	8002268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f866 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f7ff ff28 	bl	8000680 <MX_GPIO_Init>
  MX_TIM11_Init();
 8000830:	f000 feee 	bl	8001610 <MX_TIM11_Init>
  MX_TIM13_Init();
 8000834:	f000 ff3a 	bl	80016ac <MX_TIM13_Init>
  MX_TIM14_Init();
 8000838:	f000 ff86 	bl	8001748 <MX_TIM14_Init>
  MX_TIM9_Init();
 800083c:	f000 fea2 	bl	8001584 <MX_TIM9_Init>
  MX_TIM4_Init();
 8000840:	f000 fd8c 	bl	800135c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000844:	f000 fdde 	bl	8001404 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000848:	f000 fd34 	bl	80012b4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800084c:	f000 fcde 	bl	800120c <MX_TIM2_Init>
  MX_DMA_Init();
 8000850:	f7ff fec0 	bl	80005d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000854:	f001 fa22 	bl	8001c9c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000858:	f000 fe28 	bl	80014ac <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800085c:	f001 fa48 	bl	8001cf0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000860:	f001 fa70 	bl	8001d44 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000864:	f000 fe58 	bl	8001518 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000868:	4817      	ldr	r0, [pc, #92]	; (80008c8 <main+0xa8>)
 800086a:	f003 f8fd 	bl	8003a68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800086e:	4817      	ldr	r0, [pc, #92]	; (80008cc <main+0xac>)
 8000870:	f003 f8fa 	bl	8003a68 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000874:	213c      	movs	r1, #60	; 0x3c
 8000876:	4816      	ldr	r0, [pc, #88]	; (80008d0 <main+0xb0>)
 8000878:	f003 fb24 	bl	8003ec4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800087c:	213c      	movs	r1, #60	; 0x3c
 800087e:	4815      	ldr	r0, [pc, #84]	; (80008d4 <main+0xb4>)
 8000880:	f003 fb20 	bl	8003ec4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000884:	213c      	movs	r1, #60	; 0x3c
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <main+0xb8>)
 8000888:	f003 fb1c 	bl	8003ec4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800088c:	213c      	movs	r1, #60	; 0x3c
 800088e:	4813      	ldr	r0, [pc, #76]	; (80008dc <main+0xbc>)
 8000890:	f003 fb18 	bl	8003ec4 <HAL_TIM_Encoder_Start>

   //PWM START
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8000894:	2104      	movs	r1, #4
 8000896:	4812      	ldr	r0, [pc, #72]	; (80008e0 <main+0xc0>)
 8000898:	f003 f9a6 	bl	8003be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800089c:	2100      	movs	r1, #0
 800089e:	4811      	ldr	r0, [pc, #68]	; (80008e4 <main+0xc4>)
 80008a0:	f003 f9a2 	bl	8003be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80008a4:	2100      	movs	r1, #0
 80008a6:	4810      	ldr	r0, [pc, #64]	; (80008e8 <main+0xc8>)
 80008a8:	f003 f99e 	bl	8003be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80008ac:	2100      	movs	r1, #0
 80008ae:	480f      	ldr	r0, [pc, #60]	; (80008ec <main+0xcc>)
 80008b0:	f003 f99a 	bl	8003be8 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, (uint8_t*) terimaMaster,31);
 80008b4:	221f      	movs	r2, #31
 80008b6:	490e      	ldr	r1, [pc, #56]	; (80008f0 <main+0xd0>)
 80008b8:	480e      	ldr	r0, [pc, #56]	; (80008f4 <main+0xd4>)
 80008ba:	f004 f8e0 	bl	8004a7e <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  BuzzerBuzz(40, 20);
 80008be:	2114      	movs	r1, #20
 80008c0:	2028      	movs	r0, #40	; 0x28
 80008c2:	f7ff fdfd 	bl	80004c0 <BuzzerBuzz>
  {
 80008c6:	e7fa      	b.n	80008be <main+0x9e>
 80008c8:	200002d0 	.word	0x200002d0
 80008cc:	200003f0 	.word	0x200003f0
 80008d0:	20000360 	.word	0x20000360
 80008d4:	200001f8 	.word	0x200001f8
 80008d8:	20000168 	.word	0x20000168
 80008dc:	200001b0 	.word	0x200001b0
 80008e0:	20000318 	.word	0x20000318
 80008e4:	20000288 	.word	0x20000288
 80008e8:	20000240 	.word	0x20000240
 80008ec:	200003a8 	.word	0x200003a8
 80008f0:	200000c8 	.word	0x200000c8
 80008f4:	200006bc 	.word	0x200006bc

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2230      	movs	r2, #48	; 0x30
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f005 f8ce 	bl	8005aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <SystemClock_Config+0xcc>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a27      	ldr	r2, [pc, #156]	; (80009c4 <SystemClock_Config+0xcc>)
 8000926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <SystemClock_Config+0xcc>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <SystemClock_Config+0xd0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <SystemClock_Config+0xd0>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <SystemClock_Config+0xd0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000968:	2304      	movs	r3, #4
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800096c:	23a8      	movs	r3, #168	; 0xa8
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000974:	2304      	movs	r3, #4
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4618      	mov	r0, r3
 800097e:	f002 fbaf 	bl	80030e0 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000988:	f000 f8b2 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	230f      	movs	r3, #15
 800098e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	2302      	movs	r3, #2
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000998:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2105      	movs	r1, #5
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fe10 	bl	80035d0 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009b6:	f000 f89b 	bl	8000af0 <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3750      	adds	r7, #80	; 0x50
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40007000 	.word	0x40007000

080009cc <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_UART_RxHalfCpltCallback+0x60>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d121      	bne.n	8000a22 <HAL_UART_RxHalfCpltCallback+0x56>
		if((terimaMaster[0] == 'i' && terimaMaster[1] == 't' && terimaMaster[2] == 's')==0){
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_UART_RxHalfCpltCallback+0x64>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b69      	cmp	r3, #105	; 0x69
 80009e4:	d109      	bne.n	80009fa <HAL_UART_RxHalfCpltCallback+0x2e>
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_UART_RxHalfCpltCallback+0x64>)
 80009e8:	785b      	ldrb	r3, [r3, #1]
 80009ea:	2b74      	cmp	r3, #116	; 0x74
 80009ec:	d105      	bne.n	80009fa <HAL_UART_RxHalfCpltCallback+0x2e>
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_UART_RxHalfCpltCallback+0x64>)
 80009f0:	789b      	ldrb	r3, [r3, #2]
 80009f2:	2b73      	cmp	r3, #115	; 0x73
 80009f4:	d101      	bne.n	80009fa <HAL_UART_RxHalfCpltCallback+0x2e>
 80009f6:	2301      	movs	r3, #1
 80009f8:	e000      	b.n	80009fc <HAL_UART_RxHalfCpltCallback+0x30>
 80009fa:	2300      	movs	r3, #0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d110      	bne.n	8000a22 <HAL_UART_RxHalfCpltCallback+0x56>
//			memcpy(&counter, terimaMaster+3,2);
			HAL_DMA_Abort(&hdma_usart1_rx);
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <HAL_UART_RxHalfCpltCallback+0x68>)
 8000a02:	f001 febb 	bl	800277c <HAL_DMA_Abort>
		    HAL_UART_Receive_DMA(&huart1, (uint8_t*) terimaMaster,31);
 8000a06:	221f      	movs	r2, #31
 8000a08:	4909      	ldr	r1, [pc, #36]	; (8000a30 <HAL_UART_RxHalfCpltCallback+0x64>)
 8000a0a:	480b      	ldr	r0, [pc, #44]	; (8000a38 <HAL_UART_RxHalfCpltCallback+0x6c>)
 8000a0c:	f004 f837 	bl	8004a7e <HAL_UART_Receive_DMA>

			counter3++;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_UART_RxHalfCpltCallback+0x70>)
 8000a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	b21a      	sxth	r2, r3
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <HAL_UART_RxHalfCpltCallback+0x70>)
 8000a20:	801a      	strh	r2, [r3, #0]
//		}


	}

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40011000 	.word	0x40011000
 8000a30:	200000c8 	.word	0x200000c8
 8000a34:	200005fc 	.word	0x200005fc
 8000a38:	200006bc 	.word	0x200006bc
 8000a3c:	2000009a 	.word	0x2000009a

08000a40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <HAL_UART_RxCpltCallback+0x70>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d128      	bne.n	8000aa4 <HAL_UART_RxCpltCallback+0x64>
		if((terimaMaster[0] == 'i' && terimaMaster[1] == 't' && terimaMaster[2] == 's')==1){
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_RxCpltCallback+0x74>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b69      	cmp	r3, #105	; 0x69
 8000a58:	d109      	bne.n	8000a6e <HAL_UART_RxCpltCallback+0x2e>
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_UART_RxCpltCallback+0x74>)
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	2b74      	cmp	r3, #116	; 0x74
 8000a60:	d105      	bne.n	8000a6e <HAL_UART_RxCpltCallback+0x2e>
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_UART_RxCpltCallback+0x74>)
 8000a64:	789b      	ldrb	r3, [r3, #2]
 8000a66:	2b73      	cmp	r3, #115	; 0x73
 8000a68:	d101      	bne.n	8000a6e <HAL_UART_RxCpltCallback+0x2e>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <HAL_UART_RxCpltCallback+0x30>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d117      	bne.n	8000aa4 <HAL_UART_RxCpltCallback+0x64>
//			memcpy(&counter, terimaMaster+3,2);
			  memcpy(&globalSpeedOut[0], terimaMaster+3, 2);
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_UART_RxCpltCallback+0x78>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_UART_RxCpltCallback+0x7c>)
 8000a7c:	801a      	strh	r2, [r3, #0]
			  memcpy(&globalSpeedOut[1], terimaMaster +5, 2);
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_UART_RxCpltCallback+0x80>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <HAL_UART_RxCpltCallback+0x7c>)
 8000a86:	805a      	strh	r2, [r3, #2]
		      memcpy(&globalSpeedOut[2], terimaMaster +7, 2);
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_UART_RxCpltCallback+0x84>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_UART_RxCpltCallback+0x7c>)
 8000a90:	809a      	strh	r2, [r3, #4]
		      counter2++;
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_UART_RxCpltCallback+0x88>)
 8000a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_UART_RxCpltCallback+0x88>)
 8000aa2:	801a      	strh	r2, [r3, #0]
		}


	}

}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40011000 	.word	0x40011000
 8000ab4:	200000c8 	.word	0x200000c8
 8000ab8:	200000cb 	.word	0x200000cb
 8000abc:	2000009c 	.word	0x2000009c
 8000ac0:	200000cd 	.word	0x200000cd
 8000ac4:	200000cf 	.word	0x200000cf
 8000ac8:	2000011a 	.word	0x2000011a

08000acc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) terimaMaster,31);
 8000ad4:	221f      	movs	r2, #31
 8000ad6:	4904      	ldr	r1, [pc, #16]	; (8000ae8 <HAL_UART_ErrorCallback+0x1c>)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <HAL_UART_ErrorCallback+0x20>)
 8000ada:	f003 ffd0 	bl	8004a7e <HAL_UART_Receive_DMA>
	//HAL_UART_Transmit(&huart1, (uint8_t*) kirimSlave, 31,100);
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000c8 	.word	0x200000c8
 8000aec:	200006bc 	.word	0x200006bc

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <MotorWheelsSP>:
						 {    -0.707,     0.707,   -1},
						 {    0.707,    0.707,   -1},
						 };

void MotorWheelsSP(short int motor_speed_target[4], short int localSpeedVector[3])
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]

	for(int l = 0; l < 4; l++){
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e008      	b.n	8000b1e <MotorWheelsSP+0x22>
		motor_speed_target[l] = 0;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	801a      	strh	r2, [r3, #0]
	for(int l = 0; l < 4; l++){
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	ddf3      	ble.n	8000b0c <MotorWheelsSP+0x10>
	}

	for(int i = 0; i < 4; i++){
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	e038      	b.n	8000b9c <MotorWheelsSP+0xa0>
		for(int j = 0; j < 3; j++){
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	e02f      	b.n	8000b90 <MotorWheelsSP+0x94>
			motor_speed_target[i] += kineMatrix[i][j] * localSpeedVector[j];
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	4413      	add	r3, r2
 8000b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b44:	491a      	ldr	r1, [pc, #104]	; (8000bb0 <MotorWheelsSP+0xb4>)
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4413      	add	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	440b      	add	r3, r1
 8000b56:	edd3 6a00 	vldr	s13, [r3]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b82:	ee17 2a90 	vmov	r2, s15
 8000b86:	b212      	sxth	r2, r2
 8000b88:	801a      	strh	r2, [r3, #0]
		for(int j = 0; j < 3; j++){
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	ddcc      	ble.n	8000b30 <MotorWheelsSP+0x34>
	for(int i = 0; i < 4; i++){
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	ddc3      	ble.n	8000b2a <MotorWheelsSP+0x2e>
		}
	}
//	motor_omni_set_pwm(global_motor_speed_target);

}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20000020 	.word	0x20000020

08000bb4 <motor_omni_kontrol>:

void motor_omni_kontrol(short int output_motor[4], short int motor_speed_target[4], short int motor_speed[4])
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 4; i++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e112      	b.n	8000dec <motor_omni_kontrol+0x238>
	{
		error_motor			[i] = motor_speed_target [i] - motor_speed [i];
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	4413      	add	r3, r2
 8000bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	440b      	add	r3, r1
 8000bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b219      	sxth	r1, r3
 8000be8:	4a90      	ldr	r2, [pc, #576]	; (8000e2c <motor_omni_kontrol+0x278>)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 //diberi batas
			if (error_motor[i] > 499)
 8000bf0:	4a8e      	ldr	r2, [pc, #568]	; (8000e2c <motor_omni_kontrol+0x278>)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bf8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bfc:	db06      	blt.n	8000c0c <motor_omni_kontrol+0x58>
				error_motor[i] = 499;
 8000bfe:	4a8b      	ldr	r2, [pc, #556]	; (8000e2c <motor_omni_kontrol+0x278>)
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f240 11f3 	movw	r1, #499	; 0x1f3
 8000c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c0a:	e00c      	b.n	8000c26 <motor_omni_kontrol+0x72>
			else if (error_motor[i]< -499)
 8000c0c:	4a87      	ldr	r2, [pc, #540]	; (8000e2c <motor_omni_kontrol+0x278>)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c14:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000c18:	dc05      	bgt.n	8000c26 <motor_omni_kontrol+0x72>
				error_motor[i] = -499;
 8000c1a:	4a84      	ldr	r2, [pc, #528]	; (8000e2c <motor_omni_kontrol+0x278>)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f64f 610d 	movw	r1, #65037	; 0xfe0d
 8000c22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sum_error_motor 	[i] += error_motor[i];
 8000c26:	4a82      	ldr	r2, [pc, #520]	; (8000e30 <motor_omni_kontrol+0x27c>)
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	497e      	ldr	r1, [pc, #504]	; (8000e2c <motor_omni_kontrol+0x278>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b219      	sxth	r1, r3
 8000c40:	4a7b      	ldr	r2, [pc, #492]	; (8000e30 <motor_omni_kontrol+0x27c>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			//diberi batas
		if (integral_motor [i] > 200 ) integral_motor [i] = 200 ;
 8000c48:	4a7a      	ldr	r2, [pc, #488]	; (8000e34 <motor_omni_kontrol+0x280>)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	edd3 7a00 	vldr	s15, [r3]
 8000c54:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8000e38 <motor_omni_kontrol+0x284>
 8000c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c60:	dd05      	ble.n	8000c6e <motor_omni_kontrol+0xba>
 8000c62:	4a74      	ldr	r2, [pc, #464]	; (8000e34 <motor_omni_kontrol+0x280>)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a74      	ldr	r2, [pc, #464]	; (8000e3c <motor_omni_kontrol+0x288>)
 8000c6c:	601a      	str	r2, [r3, #0]
		if (integral_motor [i] < -200 ) integral_motor [i] = -200 ;
 8000c6e:	4a71      	ldr	r2, [pc, #452]	; (8000e34 <motor_omni_kontrol+0x280>)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	edd3 7a00 	vldr	s15, [r3]
 8000c7a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8000e40 <motor_omni_kontrol+0x28c>
 8000c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c86:	d505      	bpl.n	8000c94 <motor_omni_kontrol+0xe0>
 8000c88:	4a6a      	ldr	r2, [pc, #424]	; (8000e34 <motor_omni_kontrol+0x280>)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a6c      	ldr	r2, [pc, #432]	; (8000e44 <motor_omni_kontrol+0x290>)
 8000c92:	601a      	str	r2, [r3, #0]

		if (motor_speed_target [i] == 0 ) {
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10b      	bne.n	8000cbc <motor_omni_kontrol+0x108>
			integral_motor [i] = 0 ;
 8000ca4:	4a63      	ldr	r2, [pc, #396]	; (8000e34 <motor_omni_kontrol+0x280>)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	f04f 0200 	mov.w	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
			sum_error_motor[i] = 0 ;
 8000cb2:	4a5f      	ldr	r2, [pc, #380]	; (8000e30 <motor_omni_kontrol+0x27c>)
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		proportional_motor 	[i] = kp_kontrol_motor [i]*error_motor[i];
 8000cbc:	4a62      	ldr	r2, [pc, #392]	; (8000e48 <motor_omni_kontrol+0x294>)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	ed93 7a00 	vldr	s14, [r3]
 8000cc8:	4a58      	ldr	r2, [pc, #352]	; (8000e2c <motor_omni_kontrol+0x278>)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000cd0:	ee07 3a90 	vmov	s15, r3
 8000cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cdc:	4a5b      	ldr	r2, [pc, #364]	; (8000e4c <motor_omni_kontrol+0x298>)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	edc3 7a00 	vstr	s15, [r3]
		integral_motor 		[i] = ki_kontrol_motor [i]*sum_error_motor[i];
 8000ce8:	4a59      	ldr	r2, [pc, #356]	; (8000e50 <motor_omni_kontrol+0x29c>)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	ed93 7a00 	vldr	s14, [r3]
 8000cf4:	4a4e      	ldr	r2, [pc, #312]	; (8000e30 <motor_omni_kontrol+0x27c>)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000cfc:	ee07 3a90 	vmov	s15, r3
 8000d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d08:	4a4a      	ldr	r2, [pc, #296]	; (8000e34 <motor_omni_kontrol+0x280>)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	edc3 7a00 	vstr	s15, [r3]
		derivative_motor 	[i] = kd_kontrol_motor [i]*(motor_speed[i] - previous_error_motor [i]);
 8000d14:	4a4f      	ldr	r2, [pc, #316]	; (8000e54 <motor_omni_kontrol+0x2a0>)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	ed93 7a00 	vldr	s14, [r3]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	4413      	add	r3, r2
 8000d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4a4a      	ldr	r2, [pc, #296]	; (8000e58 <motor_omni_kontrol+0x2a4>)
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d36:	1acb      	subs	r3, r1, r3
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d44:	4a45      	ldr	r2, [pc, #276]	; (8000e5c <motor_omni_kontrol+0x2a8>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	edc3 7a00 	vstr	s15, [r3]

		previous_error_motor[i] = motor_speed [i];
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d5c:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <motor_omni_kontrol+0x2a4>)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		output_motor		[i] = (short int )(proportional_motor [i] + integral_motor [i] + derivative_motor [i]);
 8000d64:	4a39      	ldr	r2, [pc, #228]	; (8000e4c <motor_omni_kontrol+0x298>)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	ed93 7a00 	vldr	s14, [r3]
 8000d70:	4a30      	ldr	r2, [pc, #192]	; (8000e34 <motor_omni_kontrol+0x280>)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	edd3 7a00 	vldr	s15, [r3]
 8000d7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d80:	4a36      	ldr	r2, [pc, #216]	; (8000e5c <motor_omni_kontrol+0x2a8>)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	edd3 7a00 	vldr	s15, [r3]
 8000d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d9c:	ee17 2a90 	vmov	r2, s15
 8000da0:	b212      	sxth	r2, r2
 8000da2:	801a      	strh	r2, [r3, #0]

			if(output_motor[i]>499)
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000db4:	db07      	blt.n	8000dc6 <motor_omni_kontrol+0x212>
				output_motor[i]=499;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000dc2:	801a      	strh	r2, [r3, #0]
 8000dc4:	e00f      	b.n	8000de6 <motor_omni_kontrol+0x232>
			else if(output_motor[i]<-499)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	4413      	add	r3, r2
 8000dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd2:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000dd6:	dc06      	bgt.n	8000de6 <motor_omni_kontrol+0x232>
				output_motor[i]=-499;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	f64f 620d 	movw	r2, #65037	; 0xfe0d
 8000de4:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	f77f aee9 	ble.w	8000bc6 <motor_omni_kontrol+0x12>
//				{
//					sum_error_motor[i] = 0; previous_error_motor[i] = 0; output_motor[i] = 0;
//				}
	}

	motor_omni_set_pwm(output_motor); //nilai pid dimasukan ke set pwm
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f000 f835 	bl	8000e64 <motor_omni_set_pwm>
	for(int i=0;i<4;i++){
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	e00c      	b.n	8000e1a <motor_omni_kontrol+0x266>
		print_outputPWM [i] = output_motor[i];
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <motor_omni_kontrol+0x2ac>)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<4;i++){
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	3301      	adds	r3, #1
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	ddef      	ble.n	8000e00 <motor_omni_kontrol+0x24c>
	}
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000160 	.word	0x20000160
 8000e30:	20000130 	.word	0x20000130
 8000e34:	2000011c 	.word	0x2000011c
 8000e38:	43480000 	.word	0x43480000
 8000e3c:	43480000 	.word	0x43480000
 8000e40:	c3480000 	.word	0xc3480000
 8000e44:	c3480000 	.word	0xc3480000
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000150 	.word	0x20000150
 8000e50:	20000010 	.word	0x20000010
 8000e54:	20000080 	.word	0x20000080
 8000e58:	20000148 	.word	0x20000148
 8000e5c:	20000138 	.word	0x20000138
 8000e60:	200000b8 	.word	0x200000b8

08000e64 <motor_omni_set_pwm>:

//////////////////////
//buat set pwm motor omni
/////////////////////
void motor_omni_set_pwm(short int outputPWM[4])
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    //motor omni 0
    if (outputPWM[0] < 0)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	da0a      	bge.n	8000e8c <motor_omni_set_pwm+0x28>
        {
    		HAL_GPIO_WritePin(portDir1Motor0_GPIO_Port, portDir1Motor0_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2110      	movs	r1, #16
 8000e7a:	4854      	ldr	r0, [pc, #336]	; (8000fcc <motor_omni_set_pwm+0x168>)
 8000e7c:	f002 f916 	bl	80030ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portDir2Motor0_GPIO_Port, portDir2Motor0_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2120      	movs	r1, #32
 8000e84:	4851      	ldr	r0, [pc, #324]	; (8000fcc <motor_omni_set_pwm+0x168>)
 8000e86:	f002 f911 	bl	80030ac <HAL_GPIO_WritePin>
 8000e8a:	e00e      	b.n	8000eaa <motor_omni_set_pwm+0x46>
        }
    else if (outputPWM[0] > 0)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	dd09      	ble.n	8000eaa <motor_omni_set_pwm+0x46>
        {
            HAL_GPIO_WritePin(portDir1Motor0_GPIO_Port, portDir1Motor0_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2110      	movs	r1, #16
 8000e9a:	484c      	ldr	r0, [pc, #304]	; (8000fcc <motor_omni_set_pwm+0x168>)
 8000e9c:	f002 f906 	bl	80030ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(portDir2Motor0_GPIO_Port, portDir2Motor0_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	4849      	ldr	r0, [pc, #292]	; (8000fcc <motor_omni_set_pwm+0x168>)
 8000ea6:	f002 f901 	bl	80030ac <HAL_GPIO_WritePin>
        }
    //motor omni 1
    if (outputPWM[1] > 0)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3302      	adds	r3, #2
 8000eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	dd0a      	ble.n	8000ecc <motor_omni_set_pwm+0x68>
        {
            HAL_GPIO_WritePin(portDir1Motor1_GPIO_Port, portDir1Motor1_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4845      	ldr	r0, [pc, #276]	; (8000fd0 <motor_omni_set_pwm+0x16c>)
 8000ebc:	f002 f8f6 	bl	80030ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(portDir2Motor1_GPIO_Port, portDir2Motor1_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	4842      	ldr	r0, [pc, #264]	; (8000fd0 <motor_omni_set_pwm+0x16c>)
 8000ec6:	f002 f8f1 	bl	80030ac <HAL_GPIO_WritePin>
 8000eca:	e00f      	b.n	8000eec <motor_omni_set_pwm+0x88>
        }
    else if (outputPWM[1] < 0)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3302      	adds	r3, #2
 8000ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da09      	bge.n	8000eec <motor_omni_set_pwm+0x88>
        {
            HAL_GPIO_WritePin(portDir1Motor1_GPIO_Port, portDir1Motor1_Pin, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2101      	movs	r1, #1
 8000edc:	483c      	ldr	r0, [pc, #240]	; (8000fd0 <motor_omni_set_pwm+0x16c>)
 8000ede:	f002 f8e5 	bl	80030ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(portDir2Motor1_GPIO_Port, portDir2Motor1_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	483a      	ldr	r0, [pc, #232]	; (8000fd0 <motor_omni_set_pwm+0x16c>)
 8000ee8:	f002 f8e0 	bl	80030ac <HAL_GPIO_WritePin>
        }
    //motor omni 2
    if (outputPWM[2] > 0)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3304      	adds	r3, #4
 8000ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	dd0b      	ble.n	8000f10 <motor_omni_set_pwm+0xac>
        {
            HAL_GPIO_WritePin(portDir1Motor2_GPIO_Port, portDir1Motor2_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efe:	4835      	ldr	r0, [pc, #212]	; (8000fd4 <motor_omni_set_pwm+0x170>)
 8000f00:	f002 f8d4 	bl	80030ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(portDir2Motor2_GPIO_Port, portDir2Motor2_Pin, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2120      	movs	r1, #32
 8000f08:	4833      	ldr	r0, [pc, #204]	; (8000fd8 <motor_omni_set_pwm+0x174>)
 8000f0a:	f002 f8cf 	bl	80030ac <HAL_GPIO_WritePin>
 8000f0e:	e010      	b.n	8000f32 <motor_omni_set_pwm+0xce>
        }
    else if (outputPWM[2] < 0)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3304      	adds	r3, #4
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	da0a      	bge.n	8000f32 <motor_omni_set_pwm+0xce>
        {
            HAL_GPIO_WritePin(portDir1Motor2_GPIO_Port, portDir1Motor2_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f22:	482c      	ldr	r0, [pc, #176]	; (8000fd4 <motor_omni_set_pwm+0x170>)
 8000f24:	f002 f8c2 	bl	80030ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(portDir2Motor2_GPIO_Port, portDir2Motor2_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2120      	movs	r1, #32
 8000f2c:	482a      	ldr	r0, [pc, #168]	; (8000fd8 <motor_omni_set_pwm+0x174>)
 8000f2e:	f002 f8bd 	bl	80030ac <HAL_GPIO_WritePin>
        }
    //motor omni 3
    if (outputPWM[3] < 0)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3306      	adds	r3, #6
 8000f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	da0a      	bge.n	8000f54 <motor_omni_set_pwm+0xf0>
        {
            HAL_GPIO_WritePin(portDir1Motor3_GPIO_Port, portDir1Motor3_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2104      	movs	r1, #4
 8000f42:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <motor_omni_set_pwm+0x16c>)
 8000f44:	f002 f8b2 	bl	80030ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(portDir2Motor3_GPIO_Port, portDir2Motor3_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2180      	movs	r1, #128	; 0x80
 8000f4c:	4823      	ldr	r0, [pc, #140]	; (8000fdc <motor_omni_set_pwm+0x178>)
 8000f4e:	f002 f8ad 	bl	80030ac <HAL_GPIO_WritePin>
 8000f52:	e00f      	b.n	8000f74 <motor_omni_set_pwm+0x110>
        }
    else if (outputPWM[3] > 0)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3306      	adds	r3, #6
 8000f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dd09      	ble.n	8000f74 <motor_omni_set_pwm+0x110>
        {
            HAL_GPIO_WritePin(portDir1Motor3_GPIO_Port, portDir1Motor3_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2104      	movs	r1, #4
 8000f64:	481a      	ldr	r0, [pc, #104]	; (8000fd0 <motor_omni_set_pwm+0x16c>)
 8000f66:	f002 f8a1 	bl	80030ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(portDir2Motor3_GPIO_Port, portDir2Motor3_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	481b      	ldr	r0, [pc, #108]	; (8000fdc <motor_omni_set_pwm+0x178>)
 8000f70:	f002 f89c 	bl	80030ac <HAL_GPIO_WritePin>
        }

    //set timer
    TIM11->CCR1 = abs(outputPWM[0]);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bfb8      	it	lt
 8000f7e:	425b      	neglt	r3, r3
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <motor_omni_set_pwm+0x17c>)
 8000f84:	635a      	str	r2, [r3, #52]	; 0x34
    TIM13->CCR1 = abs(outputPWM[1]);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3302      	adds	r3, #2
 8000f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bfb8      	it	lt
 8000f92:	425b      	neglt	r3, r3
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <motor_omni_set_pwm+0x180>)
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
    TIM14->CCR1 = abs(outputPWM[2]);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bfb8      	it	lt
 8000fa6:	425b      	neglt	r3, r3
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <motor_omni_set_pwm+0x184>)
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
    TIM9->CCR2 = abs(outputPWM[3]);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3306      	adds	r3, #6
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bfb8      	it	lt
 8000fba:	425b      	neglt	r3, r3
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <motor_omni_set_pwm+0x188>)
 8000fc0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40014800 	.word	0x40014800
 8000fe4:	40001c00 	.word	0x40001c00
 8000fe8:	40002000 	.word	0x40002000
 8000fec:	40014000 	.word	0x40014000

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <HAL_MspInit+0x4c>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_MspInit+0x4c>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <NMI_Handler+0x4>

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108c:	f001 f93e 	bl	800230c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Stream1_IRQHandler+0x10>)
 800109a:	f001 fc01 	bl	80028a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000498 	.word	0x20000498

080010a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA1_Stream3_IRQHandler+0x10>)
 80010ae:	f001 fbf7 	bl	80028a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000053c 	.word	0x2000053c

080010bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <DMA1_Stream5_IRQHandler+0x10>)
 80010c2:	f001 fbed 	bl	80028a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000438 	.word	0x20000438

080010d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <DMA1_Stream6_IRQHandler+0x10>)
 80010d6:	f001 fbe3 	bl	80028a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000065c 	.word	0x2000065c

080010e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <USART1_IRQHandler+0x10>)
 80010ea:	f003 fcf9 	bl	8004ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200006bc 	.word	0x200006bc

080010f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <USART3_IRQHandler+0x10>)
 80010fe:	f003 fcef 	bl	8004ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200004f8 	.word	0x200004f8

0800110c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001110:	481c      	ldr	r0, [pc, #112]	; (8001184 <TIM6_DAC_IRQHandler+0x78>)
 8001112:	f002 ff65 	bl	8003fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  enc_omni[0] = TIM5->CNT;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <TIM6_DAC_IRQHandler+0x7c>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	b21a      	sxth	r2, r3
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <TIM6_DAC_IRQHandler+0x80>)
 800111e:	801a      	strh	r2, [r3, #0]
  enc_omni[1] = TIM4->CNT;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <TIM6_DAC_IRQHandler+0x84>)
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <TIM6_DAC_IRQHandler+0x80>)
 8001128:	805a      	strh	r2, [r3, #2]
  enc_omni[2] = TIM3->CNT;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <TIM6_DAC_IRQHandler+0x88>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <TIM6_DAC_IRQHandler+0x80>)
 8001132:	809a      	strh	r2, [r3, #4]
  enc_omni[3] = TIM2->CNT;
 8001134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <TIM6_DAC_IRQHandler+0x80>)
 800113e:	80da      	strh	r2, [r3, #6]

  TIM5->CNT = 0;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <TIM6_DAC_IRQHandler+0x7c>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->CNT = 0;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <TIM6_DAC_IRQHandler+0x84>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = 0;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <TIM6_DAC_IRQHandler+0x88>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->CNT = 0;
 8001152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
  counter++;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <TIM6_DAC_IRQHandler+0x8c>)
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	b29b      	uxth	r3, r3
 8001162:	3301      	adds	r3, #1
 8001164:	b29b      	uxth	r3, r3
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <TIM6_DAC_IRQHandler+0x8c>)
 800116a:	801a      	strh	r2, [r3, #0]

  MotorWheelsSP(motor_speed_target, globalSpeedOut);
 800116c:	490b      	ldr	r1, [pc, #44]	; (800119c <TIM6_DAC_IRQHandler+0x90>)
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <TIM6_DAC_IRQHandler+0x94>)
 8001170:	f7ff fcc4 	bl	8000afc <MotorWheelsSP>
	////
  motor_omni_kontrol(Motor_Omni_PWM, motor_speed_target, enc_omni);
 8001174:	4a05      	ldr	r2, [pc, #20]	; (800118c <TIM6_DAC_IRQHandler+0x80>)
 8001176:	490a      	ldr	r1, [pc, #40]	; (80011a0 <TIM6_DAC_IRQHandler+0x94>)
 8001178:	480a      	ldr	r0, [pc, #40]	; (80011a4 <TIM6_DAC_IRQHandler+0x98>)
 800117a:	f7ff fd1b 	bl	8000bb4 <motor_omni_kontrol>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200002d0 	.word	0x200002d0
 8001188:	40000c00 	.word	0x40000c00
 800118c:	20000090 	.word	0x20000090
 8001190:	40000800 	.word	0x40000800
 8001194:	40000400 	.word	0x40000400
 8001198:	200000c2 	.word	0x200000c2
 800119c:	2000009c 	.word	0x2000009c
 80011a0:	20000100 	.word	0x20000100
 80011a4:	200000ac 	.word	0x200000ac

080011a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <TIM7_IRQHandler+0x14>)
 80011ae:	f002 ff17 	bl	8003fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  BuzzerRoutine();
 80011b2:	f7ff f9a9 	bl	8000508 <BuzzerRoutine>

  /* USER CODE END TIM7_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200003f0 	.word	0x200003f0

080011c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DMA2_Stream2_IRQHandler+0x10>)
 80011c6:	f001 fb6b 	bl	80028a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200005fc 	.word	0x200005fc

080011d4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA2_Stream7_IRQHandler+0x10>)
 80011da:	f001 fb61 	bl	80028a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000059c 	.word	0x2000059c

080011e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2224      	movs	r2, #36	; 0x24
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f004 fc44 	bl	8005aa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <MX_TIM2_Init+0xa4>)
 800122a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <MX_TIM2_Init+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MX_TIM2_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_TIM2_Init+0xa4>)
 800123e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001242:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_TIM2_Init+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <MX_TIM2_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001250:	2303      	movs	r3, #3
 8001252:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001258:	2301      	movs	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001268:	2301      	movs	r3, #1
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4619      	mov	r1, r3
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_TIM2_Init+0xa4>)
 800127c:	f002 fd7c 	bl	8003d78 <HAL_TIM_Encoder_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001286:	f7ff fc33 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	4619      	mov	r1, r3
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <MX_TIM2_Init+0xa4>)
 8001298:	f003 fb14 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012a2:	f7ff fc25 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	3730      	adds	r7, #48	; 0x30
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000360 	.word	0x20000360

080012b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2224      	movs	r2, #36	; 0x24
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fbf0 	bl	8005aa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_TIM3_Init+0xa0>)
 80012d2:	4a21      	ldr	r2, [pc, #132]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_TIM3_Init+0xa0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_TIM3_Init+0xa0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_TIM3_Init+0xa0>)
 80012e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_TIM3_Init+0xa0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_TIM3_Init+0xa0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012f6:	2303      	movs	r3, #3
 80012f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012fe:	2301      	movs	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800130e:	2301      	movs	r3, #1
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_TIM3_Init+0xa0>)
 8001322:	f002 fd29 	bl	8003d78 <HAL_TIM_Encoder_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800132c:	f7ff fbe0 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_TIM3_Init+0xa0>)
 800133e:	f003 fac1 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001348:	f7ff fbd2 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3730      	adds	r7, #48	; 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200001f8 	.word	0x200001f8
 8001358:	40000400 	.word	0x40000400

0800135c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fb9c 	bl	8005aa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_TIM4_Init+0xa0>)
 800137a:	4a21      	ldr	r2, [pc, #132]	; (8001400 <MX_TIM4_Init+0xa4>)
 800137c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_TIM4_Init+0xa0>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_TIM4_Init+0xa0>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_TIM4_Init+0xa0>)
 800138c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001390:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_TIM4_Init+0xa0>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_TIM4_Init+0xa0>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800139e:	2303      	movs	r3, #3
 80013a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a6:	2301      	movs	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b6:	2301      	movs	r3, #1
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4619      	mov	r1, r3
 80013c8:	480c      	ldr	r0, [pc, #48]	; (80013fc <MX_TIM4_Init+0xa0>)
 80013ca:	f002 fcd5 	bl	8003d78 <HAL_TIM_Encoder_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80013d4:	f7ff fb8c 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_TIM4_Init+0xa0>)
 80013e6:	f003 fa6d 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80013f0:	f7ff fb7e 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000168 	.word	0x20000168
 8001400:	40000800 	.word	0x40000800

08001404 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2224      	movs	r2, #36	; 0x24
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fb48 	bl	8005aa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_TIM5_Init+0xa0>)
 8001422:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <MX_TIM5_Init+0xa4>)
 8001424:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_TIM5_Init+0xa0>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM5_Init+0xa0>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_TIM5_Init+0xa0>)
 8001434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001438:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM5_Init+0xa0>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_TIM5_Init+0xa0>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001446:	2303      	movs	r3, #3
 8001448:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800144e:	2301      	movs	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800145e:	2301      	movs	r3, #1
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4619      	mov	r1, r3
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <MX_TIM5_Init+0xa0>)
 8001472:	f002 fc81 	bl	8003d78 <HAL_TIM_Encoder_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800147c:	f7ff fb38 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_TIM5_Init+0xa0>)
 800148e:	f003 fa19 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001498:	f7ff fb2a 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	3730      	adds	r7, #48	; 0x30
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200001b0 	.word	0x200001b0
 80014a8:	40000c00 	.word	0x40000c00

080014ac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_TIM6_Init+0x64>)
 80014bc:	4a15      	ldr	r2, [pc, #84]	; (8001514 <MX_TIM6_Init+0x68>)
 80014be:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1679;
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_TIM6_Init+0x64>)
 80014c2:	f240 628f 	movw	r2, #1679	; 0x68f
 80014c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_TIM6_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_TIM6_Init+0x64>)
 80014d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_TIM6_Init+0x64>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_TIM6_Init+0x64>)
 80014de:	f002 fa73 	bl	80039c8 <HAL_TIM_Base_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014e8:	f7ff fb02 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_TIM6_Init+0x64>)
 80014fa:	f003 f9e3 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001504:	f7ff faf4 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200002d0 	.word	0x200002d0
 8001514:	40001000 	.word	0x40001000

08001518 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_TIM7_Init+0x64>)
 8001528:	4a15      	ldr	r2, [pc, #84]	; (8001580 <MX_TIM7_Init+0x68>)
 800152a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_TIM7_Init+0x64>)
 800152e:	2253      	movs	r2, #83	; 0x53
 8001530:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_TIM7_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_TIM7_Init+0x64>)
 800153a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800153e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_TIM7_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_TIM7_Init+0x64>)
 8001548:	f002 fa3e 	bl	80039c8 <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001552:	f7ff facd 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_TIM7_Init+0x64>)
 8001564:	f003 f9ae 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800156e:	f7ff fabf 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200003f0 	.word	0x200003f0
 8001580:	40001400 	.word	0x40001400

08001584 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
 8001598:	615a      	str	r2, [r3, #20]
 800159a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_TIM9_Init+0x84>)
 800159e:	4a1b      	ldr	r2, [pc, #108]	; (800160c <MX_TIM9_Init+0x88>)
 80015a0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_TIM9_Init+0x84>)
 80015a4:	22a7      	movs	r2, #167	; 0xa7
 80015a6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_TIM9_Init+0x84>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 499;
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_TIM9_Init+0x84>)
 80015b0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80015b4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_TIM9_Init+0x84>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_TIM9_Init+0x84>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80015c2:	4811      	ldr	r0, [pc, #68]	; (8001608 <MX_TIM9_Init+0x84>)
 80015c4:	f002 fac0 	bl	8003b48 <HAL_TIM_PWM_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80015ce:	f7ff fa8f 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	; 0x60
 80015d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2204      	movs	r2, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_TIM9_Init+0x84>)
 80015ea:	f002 fe01 	bl	80041f0 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80015f4:	f7ff fa7c 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <MX_TIM9_Init+0x84>)
 80015fa:	f000 fa9f 	bl	8001b3c <HAL_TIM_MspPostInit>

}
 80015fe:	bf00      	nop
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000318 	.word	0x20000318
 800160c:	40014000 	.word	0x40014000

08001610 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_TIM11_Init+0x94>)
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <MX_TIM11_Init+0x98>)
 800162c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 34;
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001630:	2222      	movs	r2, #34	; 0x22
 8001632:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 499;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_TIM11_Init+0x94>)
 800163c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001640:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_TIM11_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800164e:	4815      	ldr	r0, [pc, #84]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001650:	f002 f9ba 	bl	80039c8 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800165a:	f7ff fa49 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800165e:	4811      	ldr	r0, [pc, #68]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001660:	f002 fa72 	bl	8003b48 <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800166a:	f7ff fa41 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	; 0x60
 8001670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001686:	f002 fdb3 	bl	80041f0 <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001690:	f7ff fa2e 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <MX_TIM11_Init+0x94>)
 8001696:	f000 fa51 	bl	8001b3c <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000288 	.word	0x20000288
 80016a8:	40014800 	.word	0x40014800

080016ac <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <MX_TIM13_Init+0x94>)
 80016c6:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <MX_TIM13_Init+0x98>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 167;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM13_Init+0x94>)
 80016cc:	22a7      	movs	r2, #167	; 0xa7
 80016ce:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_TIM13_Init+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 499;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM13_Init+0x94>)
 80016d8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80016dc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_TIM13_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_TIM13_Init+0x94>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80016ea:	4815      	ldr	r0, [pc, #84]	; (8001740 <MX_TIM13_Init+0x94>)
 80016ec:	f002 f96c 	bl	80039c8 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80016f6:	f7ff f9fb 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80016fa:	4811      	ldr	r0, [pc, #68]	; (8001740 <MX_TIM13_Init+0x94>)
 80016fc:	f002 fa24 	bl	8003b48 <HAL_TIM_PWM_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001706:	f7ff f9f3 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170a:	2360      	movs	r3, #96	; 0x60
 800170c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	4807      	ldr	r0, [pc, #28]	; (8001740 <MX_TIM13_Init+0x94>)
 8001722:	f002 fd65 	bl	80041f0 <HAL_TIM_PWM_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800172c:	f7ff f9e0 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001730:	4803      	ldr	r0, [pc, #12]	; (8001740 <MX_TIM13_Init+0x94>)
 8001732:	f000 fa03 	bl	8001b3c <HAL_TIM_MspPostInit>

}
 8001736:	bf00      	nop
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000240 	.word	0x20000240
 8001744:	40001c00 	.word	0x40001c00

08001748 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	615a      	str	r2, [r3, #20]
 800175e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <MX_TIM14_Init+0x94>)
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <MX_TIM14_Init+0x98>)
 8001764:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 167;
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_TIM14_Init+0x94>)
 8001768:	22a7      	movs	r2, #167	; 0xa7
 800176a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_TIM14_Init+0x94>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_TIM14_Init+0x94>)
 8001774:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001778:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_TIM14_Init+0x94>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MX_TIM14_Init+0x94>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001786:	4815      	ldr	r0, [pc, #84]	; (80017dc <MX_TIM14_Init+0x94>)
 8001788:	f002 f91e 	bl	80039c8 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001792:	f7ff f9ad 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <MX_TIM14_Init+0x94>)
 8001798:	f002 f9d6 	bl	8003b48 <HAL_TIM_PWM_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80017a2:	f7ff f9a5 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a6:	2360      	movs	r3, #96	; 0x60
 80017a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <MX_TIM14_Init+0x94>)
 80017be:	f002 fd17 	bl	80041f0 <HAL_TIM_PWM_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80017c8:	f7ff f992 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <MX_TIM14_Init+0x94>)
 80017ce:	f000 f9b5 	bl	8001b3c <HAL_TIM_MspPostInit>

}
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200003a8 	.word	0x200003a8
 80017e0:	40002000 	.word	0x40002000

080017e4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b090      	sub	sp, #64	; 0x40
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001804:	d14b      	bne.n	800189e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
 800180a:	4b71      	ldr	r3, [pc, #452]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a70      	ldr	r2, [pc, #448]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b6e      	ldr	r3, [pc, #440]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001820:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	4b6a      	ldr	r3, [pc, #424]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a69      	ldr	r2, [pc, #420]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b67      	ldr	r3, [pc, #412]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
 8001842:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a62      	ldr	r2, [pc, #392]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b60      	ldr	r3, [pc, #384]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	623b      	str	r3, [r7, #32]
 8001858:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC3A_Pin;
 800185a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001864:	2301      	movs	r3, #1
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186c:	2301      	movs	r3, #1
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC3A_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	4857      	ldr	r0, [pc, #348]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001878:	f001 fa7c 	bl	8002d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC3B_Pin;
 800187c:	2308      	movs	r3, #8
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001884:	2301      	movs	r3, #1
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800188c:	2301      	movs	r3, #1
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC3B_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001894:	4619      	mov	r1, r3
 8001896:	4850      	ldr	r0, [pc, #320]	; (80019d8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8001898:	f001 fa6c 	bl	8002d74 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800189c:	e094      	b.n	80019c8 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a4e      	ldr	r2, [pc, #312]	; (80019dc <HAL_TIM_Encoder_MspInit+0x1f8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d12c      	bne.n	8001902 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	6413      	str	r3, [r2, #64]	; 0x40
 80018b8:	4b45      	ldr	r3, [pc, #276]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4a40      	ldr	r2, [pc, #256]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	6313      	str	r3, [r2, #48]	; 0x30
 80018d4:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 80018e0:	2330      	movs	r3, #48	; 0x30
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018f0:	2302      	movs	r3, #2
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f8:	4619      	mov	r1, r3
 80018fa:	4837      	ldr	r0, [pc, #220]	; (80019d8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80018fc:	f001 fa3a 	bl	8002d74 <HAL_GPIO_Init>
}
 8001900:	e062      	b.n	80019c8 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM4)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a36      	ldr	r2, [pc, #216]	; (80019e0 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d12c      	bne.n	8001966 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	4a2e      	ldr	r2, [pc, #184]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6413      	str	r3, [r2, #64]	; 0x40
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4a27      	ldr	r2, [pc, #156]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	6313      	str	r3, [r2, #48]	; 0x30
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 8001944:	23c0      	movs	r3, #192	; 0xc0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194c:	2301      	movs	r3, #1
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001954:	2302      	movs	r3, #2
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195c:	4619      	mov	r1, r3
 800195e:	481e      	ldr	r0, [pc, #120]	; (80019d8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8001960:	f001 fa08 	bl	8002d74 <HAL_GPIO_Init>
}
 8001964:	e030      	b.n	80019c8 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1e      	ldr	r2, [pc, #120]	; (80019e4 <HAL_TIM_Encoder_MspInit+0x200>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d12b      	bne.n	80019c8 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6413      	str	r3, [r2, #64]	; 0x40
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6313      	str	r3, [r2, #48]	; 0x30
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC0A_Pin|ENC0B_Pin;
 80019a8:	2303      	movs	r3, #3
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80019b8:	2302      	movs	r3, #2
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c0:	4619      	mov	r1, r3
 80019c2:	4804      	ldr	r0, [pc, #16]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80019c4:	f001 f9d6 	bl	8002d74 <HAL_GPIO_Init>
}
 80019c8:	bf00      	nop
 80019ca:	3740      	adds	r7, #64	; 0x40
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40000400 	.word	0x40000400
 80019e0:	40000800 	.word	0x40000800
 80019e4:	40000c00 	.word	0x40000c00

080019e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a3a      	ldr	r2, [pc, #232]	; (8001ae0 <HAL_TIM_Base_MspInit+0xf8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d116      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a38      	ldr	r2, [pc, #224]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001a04:	f043 0310 	orr.w	r3, r3, #16
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2036      	movs	r0, #54	; 0x36
 8001a1c:	f000 fd71 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a20:	2036      	movs	r0, #54	; 0x36
 8001a22:	f000 fd8a 	bl	800253a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001a26:	e056      	b.n	8001ad6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM7)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ae8 <HAL_TIM_Base_MspInit+0x100>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d116      	bne.n	8001a60 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001a3c:	f043 0320 	orr.w	r3, r3, #32
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	2037      	movs	r0, #55	; 0x37
 8001a54:	f000 fd55 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a58:	2037      	movs	r0, #55	; 0x37
 8001a5a:	f000 fd6e 	bl	800253a <HAL_NVIC_EnableIRQ>
}
 8001a5e:	e03a      	b.n	8001ad6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a21      	ldr	r2, [pc, #132]	; (8001aec <HAL_TIM_Base_MspInit+0x104>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d10e      	bne.n	8001a88 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
}
 8001a86:	e026      	b.n	8001ad6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM13)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_TIM_Base_MspInit+0x108>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d10e      	bne.n	8001ab0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
}
 8001aae:	e012      	b.n	8001ad6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM14)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_TIM_Base_MspInit+0x10c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
}
 8001ad6:	bf00      	nop
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40001000 	.word	0x40001000
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40001400 	.word	0x40001400
 8001aec:	40014800 	.word	0x40014800
 8001af0:	40001c00 	.word	0x40001c00
 8001af4:	40002000 	.word	0x40002000

08001af8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10d      	bne.n	8001b26 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_TIM_PWM_MspInit+0x40>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_TIM_PWM_MspInit+0x40>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_TIM_PWM_MspInit+0x40>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40014000 	.word	0x40014000
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_TIM_MspPostInit+0x140>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d11e      	bne.n	8001b9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a46      	ldr	r2, [pc, #280]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	69bb      	ldr	r3, [r7, #24]
    /**TIM9 GPIO Configuration
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = portPWMMotor3_Pin;
 8001b7a:	2340      	movs	r3, #64	; 0x40
 8001b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(portPWMMotor3_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	483b      	ldr	r0, [pc, #236]	; (8001c84 <HAL_TIM_MspPostInit+0x148>)
 8001b96:	f001 f8ed 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001b9a:	e06b      	b.n	8001c74 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM11)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a39      	ldr	r2, [pc, #228]	; (8001c88 <HAL_TIM_MspPostInit+0x14c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d11f      	bne.n	8001be6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a34      	ldr	r2, [pc, #208]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = portPWMMotor0_Pin;
 8001bc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(portPWMMotor0_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	482b      	ldr	r0, [pc, #172]	; (8001c8c <HAL_TIM_MspPostInit+0x150>)
 8001be0:	f001 f8c8 	bl	8002d74 <HAL_GPIO_Init>
}
 8001be4:	e046      	b.n	8001c74 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM13)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <HAL_TIM_MspPostInit+0x154>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d11e      	bne.n	8001c2e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = portPWMMotor1_Pin;
 8001c0c:	2340      	movs	r3, #64	; 0x40
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001c1c:	2309      	movs	r3, #9
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(portPWMMotor1_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	481b      	ldr	r0, [pc, #108]	; (8001c94 <HAL_TIM_MspPostInit+0x158>)
 8001c28:	f001 f8a4 	bl	8002d74 <HAL_GPIO_Init>
}
 8001c2c:	e022      	b.n	8001c74 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM14)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_TIM_MspPostInit+0x15c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d11d      	bne.n	8001c74 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6313      	str	r3, [r2, #48]	; 0x30
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_TIM_MspPostInit+0x144>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = portPWMMotor2_Pin;
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001c64:	2309      	movs	r3, #9
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(portPWMMotor2_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <HAL_TIM_MspPostInit+0x158>)
 8001c70:	f001 f880 	bl	8002d74 <HAL_GPIO_Init>
}
 8001c74:	bf00      	nop
 8001c76:	3730      	adds	r7, #48	; 0x30
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40014000 	.word	0x40014000
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40014800 	.word	0x40014800
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40001c00 	.word	0x40001c00
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40002000 	.word	0x40002000

08001c9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <MX_USART1_UART_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	f002 fe86 	bl	80049e4 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cde:	f7fe ff07 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200006bc 	.word	0x200006bc
 8001cec:	40011000 	.word	0x40011000

08001cf0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <MX_USART2_UART_Init+0x50>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d28:	f002 fe5c 	bl	80049e4 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d32:	f7fe fedd 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000700 	.word	0x20000700
 8001d40:	40004400 	.word	0x40004400

08001d44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <MX_USART3_UART_Init+0x50>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_USART3_UART_Init+0x4c>)
 8001d7c:	f002 fe32 	bl	80049e4 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d86:	f7fe feb3 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200004f8 	.word	0x200004f8
 8001d94:	40004800 	.word	0x40004800

08001d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b090      	sub	sp, #64	; 0x40
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <HAL_UART_MspInit+0x14c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	f040 80a2 	bne.w	8001f00 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc0:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <HAL_UART_MspInit+0x150>)
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <HAL_UART_MspInit+0x150>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	6453      	str	r3, [r2, #68]	; 0x44
 8001dcc:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_UART_MspInit+0x150>)
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
 8001ddc:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <HAL_UART_MspInit+0x150>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a41      	ldr	r2, [pc, #260]	; (8001ee8 <HAL_UART_MspInit+0x150>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <HAL_UART_MspInit+0x150>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001df4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e06:	2307      	movs	r3, #7
 8001e08:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4836      	ldr	r0, [pc, #216]	; (8001eec <HAL_UART_MspInit+0x154>)
 8001e12:	f000 ffaf 	bl	8002d74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e18:	4a36      	ldr	r2, [pc, #216]	; (8001ef4 <HAL_UART_MspInit+0x15c>)
 8001e1a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e1c:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e22:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e24:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2a:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e30:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e4a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e58:	4825      	ldr	r0, [pc, #148]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e5a:	f000 fb89 	bl	8002570 <HAL_DMA_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001e64:	f7fe fe44 	bl	8000af0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a21      	ldr	r2, [pc, #132]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e6e:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <HAL_UART_MspInit+0x158>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001e76:	4a21      	ldr	r2, [pc, #132]	; (8001efc <HAL_UART_MspInit+0x164>)
 8001e78:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001e7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e80:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001e84:	2240      	movs	r2, #64	; 0x40
 8001e86:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e94:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ea8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001eb6:	4810      	ldr	r0, [pc, #64]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001eb8:	f000 fb5a 	bl	8002570 <HAL_DMA_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001ec2:	f7fe fe15 	bl	8000af0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <HAL_UART_MspInit+0x160>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2025      	movs	r0, #37	; 0x25
 8001ed8:	f000 fb13 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001edc:	2025      	movs	r0, #37	; 0x25
 8001ede:	f000 fb2c 	bl	800253a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ee2:	e183      	b.n	80021ec <HAL_UART_MspInit+0x454>
 8001ee4:	40011000 	.word	0x40011000
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	200005fc 	.word	0x200005fc
 8001ef4:	40026440 	.word	0x40026440
 8001ef8:	2000059c 	.word	0x2000059c
 8001efc:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a55      	ldr	r2, [pc, #340]	; (800205c <HAL_UART_MspInit+0x2c4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	f040 80b8 	bne.w	800207c <HAL_UART_MspInit+0x2e4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
 8001f10:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_UART_MspInit+0x2c8>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_UART_MspInit+0x2c8>)
 8001f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1c:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_UART_MspInit+0x2c8>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	623b      	str	r3, [r7, #32]
 8001f26:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <HAL_UART_MspInit+0x2c8>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	4a4b      	ldr	r2, [pc, #300]	; (8002060 <HAL_UART_MspInit+0x2c8>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6313      	str	r3, [r2, #48]	; 0x30
 8001f38:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_UART_MspInit+0x2c8>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	4b45      	ldr	r3, [pc, #276]	; (8002060 <HAL_UART_MspInit+0x2c8>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	4a44      	ldr	r2, [pc, #272]	; (8002060 <HAL_UART_MspInit+0x2c8>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	6313      	str	r3, [r2, #48]	; 0x30
 8001f54:	4b42      	ldr	r3, [pc, #264]	; (8002060 <HAL_UART_MspInit+0x2c8>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f60:	2308      	movs	r3, #8
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f70:	2307      	movs	r3, #7
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	483a      	ldr	r0, [pc, #232]	; (8002064 <HAL_UART_MspInit+0x2cc>)
 8001f7c:	f000 fefa 	bl	8002d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f80:	2320      	movs	r3, #32
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f90:	2307      	movs	r3, #7
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4833      	ldr	r0, [pc, #204]	; (8002068 <HAL_UART_MspInit+0x2d0>)
 8001f9c:	f000 feea 	bl	8002d74 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001fa0:	4b32      	ldr	r3, [pc, #200]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001fa2:	4a33      	ldr	r2, [pc, #204]	; (8002070 <HAL_UART_MspInit+0x2d8>)
 8001fa4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001fa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fae:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc8:	4b28      	ldr	r3, [pc, #160]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fe0:	4822      	ldr	r0, [pc, #136]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001fe2:	f000 fac5 	bl	8002570 <HAL_DMA_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8001fec:	f7fe fd80 	bl	8000af0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_UART_MspInit+0x2d4>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 8001ffe:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <HAL_UART_MspInit+0x2e0>)
 8002000:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002002:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 8002004:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002008:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 8002018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800201c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 8002038:	2200      	movs	r2, #0
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800203c:	480d      	ldr	r0, [pc, #52]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 800203e:	f000 fa97 	bl	8002570 <HAL_DMA_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8002048:	f7fe fd52 	bl	8000af0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 8002050:	635a      	str	r2, [r3, #52]	; 0x34
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_UART_MspInit+0x2dc>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002058:	e0c8      	b.n	80021ec <HAL_UART_MspInit+0x454>
 800205a:	bf00      	nop
 800205c:	40004400 	.word	0x40004400
 8002060:	40023800 	.word	0x40023800
 8002064:	40020000 	.word	0x40020000
 8002068:	40020c00 	.word	0x40020c00
 800206c:	20000438 	.word	0x20000438
 8002070:	40026088 	.word	0x40026088
 8002074:	2000065c 	.word	0x2000065c
 8002078:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a5c      	ldr	r2, [pc, #368]	; (80021f4 <HAL_UART_MspInit+0x45c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	f040 80b2 	bne.w	80021ec <HAL_UART_MspInit+0x454>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	4b5a      	ldr	r3, [pc, #360]	; (80021f8 <HAL_UART_MspInit+0x460>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	4a59      	ldr	r2, [pc, #356]	; (80021f8 <HAL_UART_MspInit+0x460>)
 8002092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002096:	6413      	str	r3, [r2, #64]	; 0x40
 8002098:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <HAL_UART_MspInit+0x460>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_UART_MspInit+0x460>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <HAL_UART_MspInit+0x460>)
 80020ae:	f043 0302 	orr.w	r3, r3, #2
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30
 80020b4:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_UART_MspInit+0x460>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_UART_MspInit+0x460>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_UART_MspInit+0x460>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6313      	str	r3, [r2, #48]	; 0x30
 80020d0:	4b49      	ldr	r3, [pc, #292]	; (80021f8 <HAL_UART_MspInit+0x460>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020ee:	2307      	movs	r3, #7
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020f6:	4619      	mov	r1, r3
 80020f8:	4840      	ldr	r0, [pc, #256]	; (80021fc <HAL_UART_MspInit+0x464>)
 80020fa:	f000 fe3b 	bl	8002d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002110:	2307      	movs	r3, #7
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002118:	4619      	mov	r1, r3
 800211a:	4839      	ldr	r0, [pc, #228]	; (8002200 <HAL_UART_MspInit+0x468>)
 800211c:	f000 fe2a 	bl	8002d74 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_UART_MspInit+0x46c>)
 8002122:	4a39      	ldr	r2, [pc, #228]	; (8002208 <HAL_UART_MspInit+0x470>)
 8002124:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002126:	4b37      	ldr	r3, [pc, #220]	; (8002204 <HAL_UART_MspInit+0x46c>)
 8002128:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800212c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800212e:	4b35      	ldr	r3, [pc, #212]	; (8002204 <HAL_UART_MspInit+0x46c>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002134:	4b33      	ldr	r3, [pc, #204]	; (8002204 <HAL_UART_MspInit+0x46c>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_UART_MspInit+0x46c>)
 800213c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002140:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002142:	4b30      	ldr	r3, [pc, #192]	; (8002204 <HAL_UART_MspInit+0x46c>)
 8002144:	2200      	movs	r2, #0
 8002146:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002148:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <HAL_UART_MspInit+0x46c>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_UART_MspInit+0x46c>)
 8002150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002154:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <HAL_UART_MspInit+0x46c>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800215c:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_UART_MspInit+0x46c>)
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002162:	4828      	ldr	r0, [pc, #160]	; (8002204 <HAL_UART_MspInit+0x46c>)
 8002164:	f000 fa04 	bl	8002570 <HAL_DMA_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_MspInit+0x3da>
      Error_Handler();
 800216e:	f7fe fcbf 	bl	8000af0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a23      	ldr	r2, [pc, #140]	; (8002204 <HAL_UART_MspInit+0x46c>)
 8002176:	639a      	str	r2, [r3, #56]	; 0x38
 8002178:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_UART_MspInit+0x46c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <HAL_UART_MspInit+0x474>)
 8002180:	4a23      	ldr	r2, [pc, #140]	; (8002210 <HAL_UART_MspInit+0x478>)
 8002182:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_UART_MspInit+0x474>)
 8002186:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800218a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <HAL_UART_MspInit+0x474>)
 800218e:	2240      	movs	r2, #64	; 0x40
 8002190:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_UART_MspInit+0x474>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_UART_MspInit+0x474>)
 800219a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_UART_MspInit+0x474>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_UART_MspInit+0x474>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_UART_MspInit+0x474>)
 80021ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021b4:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_UART_MspInit+0x474>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_UART_MspInit+0x474>)
 80021bc:	2200      	movs	r2, #0
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80021c0:	4812      	ldr	r0, [pc, #72]	; (800220c <HAL_UART_MspInit+0x474>)
 80021c2:	f000 f9d5 	bl	8002570 <HAL_DMA_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_UART_MspInit+0x438>
      Error_Handler();
 80021cc:	f7fe fc90 	bl	8000af0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <HAL_UART_MspInit+0x474>)
 80021d4:	635a      	str	r2, [r3, #52]	; 0x34
 80021d6:	4a0d      	ldr	r2, [pc, #52]	; (800220c <HAL_UART_MspInit+0x474>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	2027      	movs	r0, #39	; 0x27
 80021e2:	f000 f98e 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021e6:	2027      	movs	r0, #39	; 0x27
 80021e8:	f000 f9a7 	bl	800253a <HAL_NVIC_EnableIRQ>
}
 80021ec:	bf00      	nop
 80021ee:	3740      	adds	r7, #64	; 0x40
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40004800 	.word	0x40004800
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020400 	.word	0x40020400
 8002200:	40020c00 	.word	0x40020c00
 8002204:	20000498 	.word	0x20000498
 8002208:	40026028 	.word	0x40026028
 800220c:	2000053c 	.word	0x2000053c
 8002210:	40026058 	.word	0x40026058

08002214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800224c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002218:	480d      	ldr	r0, [pc, #52]	; (8002250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800221a:	490e      	ldr	r1, [pc, #56]	; (8002254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002220:	e002      	b.n	8002228 <LoopCopyDataInit>

08002222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002226:	3304      	adds	r3, #4

08002228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800222c:	d3f9      	bcc.n	8002222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002230:	4c0b      	ldr	r4, [pc, #44]	; (8002260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002234:	e001      	b.n	800223a <LoopFillZerobss>

08002236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002238:	3204      	adds	r2, #4

0800223a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800223c:	d3fb      	bcc.n	8002236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800223e:	f7fe ffd3 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002242:	f003 fc0d 	bl	8005a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002246:	f7fe faeb 	bl	8000820 <main>
  bx  lr    
 800224a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800224c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002254:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002258:	08005b00 	.word	0x08005b00
  ldr r2, =_sbss
 800225c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002260:	20000748 	.word	0x20000748

08002264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC_IRQHandler>
	...

08002268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_Init+0x40>)
 8002272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <HAL_Init+0x40>)
 800227e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_Init+0x40>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002290:	2003      	movs	r0, #3
 8002292:	f000 f92b 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002296:	200f      	movs	r0, #15
 8002298:	f000 f808 	bl	80022ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800229c:	f7fe fea8 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023c00 	.word	0x40023c00

080022ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_InitTick+0x54>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_InitTick+0x58>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f943 	bl	8002556 <HAL_SYSTICK_Config>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00e      	b.n	80022f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b0f      	cmp	r3, #15
 80022de:	d80a      	bhi.n	80022f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e0:	2200      	movs	r2, #0
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022e8:	f000 f90b 	bl	8002502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ec:	4a06      	ldr	r2, [pc, #24]	; (8002308 <HAL_InitTick+0x5c>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000050 	.word	0x20000050
 8002304:	20000058 	.word	0x20000058
 8002308:	20000054 	.word	0x20000054

0800230c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x20>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x24>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4413      	add	r3, r2
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <HAL_IncTick+0x24>)
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000058 	.word	0x20000058
 8002330:	20000744 	.word	0x20000744

08002334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return uwTick;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_GetTick+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000744 	.word	0x20000744

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db0b      	blt.n	80023da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <__NVIC_EnableIRQ+0x38>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2001      	movs	r0, #1
 80023d2:	fa00 f202 	lsl.w	r2, r0, r2
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e100 	.word	0xe000e100

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024cc:	f7ff ff8e 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff29 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002514:	f7ff ff3e 	bl	8002394 <__NVIC_GetPriorityGrouping>
 8002518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff8e 	bl	8002440 <NVIC_EncodePriority>
 8002524:	4602      	mov	r2, r0
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff5d 	bl	80023ec <__NVIC_SetPriority>
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff31 	bl	80023b0 <__NVIC_EnableIRQ>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ffa2 	bl	80024a8 <SysTick_Config>
 8002564:	4603      	mov	r3, r0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff feda 	bl	8002334 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e099      	b.n	80026c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	e00f      	b.n	80025ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ae:	f7ff fec1 	bl	8002334 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d908      	bls.n	80025ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e078      	b.n	80026c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e8      	bne.n	80025ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <HAL_DMA_Init+0x158>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2b04      	cmp	r3, #4
 8002626:	d107      	bne.n	8002638 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	4313      	orrs	r3, r2
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f023 0307 	bic.w	r3, r3, #7
 800264e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	2b04      	cmp	r3, #4
 8002660:	d117      	bne.n	8002692 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00e      	beq.n	8002692 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fb01 	bl	8002c7c <DMA_CheckFifoParam>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800268e:	2301      	movs	r3, #1
 8002690:	e016      	b.n	80026c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fab8 	bl	8002c10 <DMA_CalcBaseAndBitshift>
 80026a0:	4603      	mov	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	223f      	movs	r2, #63	; 0x3f
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	f010803f 	.word	0xf010803f

080026cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_DMA_Start_IT+0x26>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e040      	b.n	8002774 <HAL_DMA_Start_IT+0xa8>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d12f      	bne.n	8002766 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fa4a 	bl	8002bb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	223f      	movs	r2, #63	; 0x3f
 8002726:	409a      	lsls	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0216 	orr.w	r2, r2, #22
 800273a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0208 	orr.w	r2, r2, #8
 8002752:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e005      	b.n	8002772 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002772:	7dfb      	ldrb	r3, [r7, #23]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002788:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800278a:	f7ff fdd3 	bl	8002334 <HAL_GetTick>
 800278e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d008      	beq.n	80027ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e052      	b.n	8002854 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0216 	bic.w	r2, r2, #22
 80027bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <HAL_DMA_Abort+0x62>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0208 	bic.w	r2, r2, #8
 80027ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fe:	e013      	b.n	8002828 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002800:	f7ff fd98 	bl	8002334 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b05      	cmp	r3, #5
 800280c:	d90c      	bls.n	8002828 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2220      	movs	r2, #32
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2203      	movs	r2, #3
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e015      	b.n	8002854 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1e4      	bne.n	8002800 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	223f      	movs	r2, #63	; 0x3f
 800283c:	409a      	lsls	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d004      	beq.n	800287a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2280      	movs	r2, #128	; 0x80
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e00c      	b.n	8002894 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2205      	movs	r2, #5
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028ac:	4b92      	ldr	r3, [pc, #584]	; (8002af8 <HAL_DMA_IRQHandler+0x258>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a92      	ldr	r2, [pc, #584]	; (8002afc <HAL_DMA_IRQHandler+0x25c>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0a9b      	lsrs	r3, r3, #10
 80028b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	2208      	movs	r2, #8
 80028cc:	409a      	lsls	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01a      	beq.n	800290c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0204 	bic.w	r2, r2, #4
 80028f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	2208      	movs	r2, #8
 80028fa:	409a      	lsls	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	f043 0201 	orr.w	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	2201      	movs	r2, #1
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d012      	beq.n	8002942 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	2201      	movs	r2, #1
 8002930:	409a      	lsls	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	f043 0202 	orr.w	r2, r3, #2
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	2204      	movs	r2, #4
 8002948:	409a      	lsls	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d012      	beq.n	8002978 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	2204      	movs	r2, #4
 8002966:	409a      	lsls	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	f043 0204 	orr.w	r2, r3, #4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	2210      	movs	r2, #16
 800297e:	409a      	lsls	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d043      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d03c      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	2210      	movs	r2, #16
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d018      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d024      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
 80029ce:	e01f      	b.n	8002a10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
 80029e0:	e016      	b.n	8002a10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d107      	bne.n	8002a00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0208 	bic.w	r2, r2, #8
 80029fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	2220      	movs	r2, #32
 8002a16:	409a      	lsls	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 808e 	beq.w	8002b3e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8086 	beq.w	8002b3e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	2220      	movs	r2, #32
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d136      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0216 	bic.w	r2, r2, #22
 8002a58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d103      	bne.n	8002a7a <HAL_DMA_IRQHandler+0x1da>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0208 	bic.w	r2, r2, #8
 8002a88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	223f      	movs	r2, #63	; 0x3f
 8002a90:	409a      	lsls	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d07d      	beq.n	8002baa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
        }
        return;
 8002ab6:	e078      	b.n	8002baa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d01c      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d108      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d030      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
 8002ae4:	e02b      	b.n	8002b3e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d027      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
 8002af6:	e022      	b.n	8002b3e <HAL_DMA_IRQHandler+0x29e>
 8002af8:	20000050 	.word	0x20000050
 8002afc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0210 	bic.w	r2, r2, #16
 8002b1c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d032      	beq.n	8002bac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d022      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2205      	movs	r2, #5
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d307      	bcc.n	8002b86 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f2      	bne.n	8002b6a <HAL_DMA_IRQHandler+0x2ca>
 8002b84:	e000      	b.n	8002b88 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b86:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
 8002ba8:	e000      	b.n	8002bac <HAL_DMA_IRQHandler+0x30c>
        return;
 8002baa:	bf00      	nop
    }
  }
}
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop

08002bb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	d108      	bne.n	8002bf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bf2:	e007      	b.n	8002c04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	60da      	str	r2, [r3, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	3b10      	subs	r3, #16
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <DMA_CalcBaseAndBitshift+0x64>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c2a:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <DMA_CalcBaseAndBitshift+0x68>)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d909      	bls.n	8002c52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c46:	f023 0303 	bic.w	r3, r3, #3
 8002c4a:	1d1a      	adds	r2, r3, #4
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c50:	e007      	b.n	8002c62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c5a:	f023 0303 	bic.w	r3, r3, #3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	aaaaaaab 	.word	0xaaaaaaab
 8002c78:	08005ae8 	.word	0x08005ae8

08002c7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d11f      	bne.n	8002cd6 <DMA_CheckFifoParam+0x5a>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d856      	bhi.n	8002d4a <DMA_CheckFifoParam+0xce>
 8002c9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <DMA_CheckFifoParam+0x28>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cc7 	.word	0x08002cc7
 8002cac:	08002cb5 	.word	0x08002cb5
 8002cb0:	08002d4b 	.word	0x08002d4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d046      	beq.n	8002d4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc4:	e043      	b.n	8002d4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cce:	d140      	bne.n	8002d52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd4:	e03d      	b.n	8002d52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cde:	d121      	bne.n	8002d24 <DMA_CheckFifoParam+0xa8>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d837      	bhi.n	8002d56 <DMA_CheckFifoParam+0xda>
 8002ce6:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <DMA_CheckFifoParam+0x70>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002cfd 	.word	0x08002cfd
 8002cf0:	08002d03 	.word	0x08002d03
 8002cf4:	08002cfd 	.word	0x08002cfd
 8002cf8:	08002d15 	.word	0x08002d15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002d00:	e030      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d025      	beq.n	8002d5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d12:	e022      	b.n	8002d5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d1c:	d11f      	bne.n	8002d5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d22:	e01c      	b.n	8002d5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d903      	bls.n	8002d32 <DMA_CheckFifoParam+0xb6>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d003      	beq.n	8002d38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d30:	e018      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
      break;
 8002d36:	e015      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00e      	beq.n	8002d62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      break;
 8002d48:	e00b      	b.n	8002d62 <DMA_CheckFifoParam+0xe6>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e00a      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e008      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;
 8002d52:	bf00      	nop
 8002d54:	e006      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
 8002d58:	e004      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e002      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;
 8002d62:	bf00      	nop
    }
  } 
  
  return status; 
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop

08002d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e16b      	b.n	8003068 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f040 815a 	bne.w	8003062 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d005      	beq.n	8002dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d130      	bne.n	8002e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 0201 	and.w	r2, r3, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d017      	beq.n	8002e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80b4 	beq.w	8003062 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b60      	ldr	r3, [pc, #384]	; (8003080 <HAL_GPIO_Init+0x30c>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4a5f      	ldr	r2, [pc, #380]	; (8003080 <HAL_GPIO_Init+0x30c>)
 8002f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f08:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0a:	4b5d      	ldr	r3, [pc, #372]	; (8003080 <HAL_GPIO_Init+0x30c>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f16:	4a5b      	ldr	r2, [pc, #364]	; (8003084 <HAL_GPIO_Init+0x310>)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	; (8003088 <HAL_GPIO_Init+0x314>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02b      	beq.n	8002f9a <HAL_GPIO_Init+0x226>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a51      	ldr	r2, [pc, #324]	; (800308c <HAL_GPIO_Init+0x318>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d025      	beq.n	8002f96 <HAL_GPIO_Init+0x222>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <HAL_GPIO_Init+0x31c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01f      	beq.n	8002f92 <HAL_GPIO_Init+0x21e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4f      	ldr	r2, [pc, #316]	; (8003094 <HAL_GPIO_Init+0x320>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d019      	beq.n	8002f8e <HAL_GPIO_Init+0x21a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4e      	ldr	r2, [pc, #312]	; (8003098 <HAL_GPIO_Init+0x324>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_GPIO_Init+0x216>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4d      	ldr	r2, [pc, #308]	; (800309c <HAL_GPIO_Init+0x328>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00d      	beq.n	8002f86 <HAL_GPIO_Init+0x212>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4c      	ldr	r2, [pc, #304]	; (80030a0 <HAL_GPIO_Init+0x32c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_GPIO_Init+0x20e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4b      	ldr	r2, [pc, #300]	; (80030a4 <HAL_GPIO_Init+0x330>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_GPIO_Init+0x20a>
 8002f7a:	2307      	movs	r3, #7
 8002f7c:	e00e      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	e00c      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f82:	2306      	movs	r3, #6
 8002f84:	e00a      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f86:	2305      	movs	r3, #5
 8002f88:	e008      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e004      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	f002 0203 	and.w	r2, r2, #3
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	4093      	lsls	r3, r2
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fac:	4935      	ldr	r1, [pc, #212]	; (8003084 <HAL_GPIO_Init+0x310>)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fba:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fde:	4a32      	ldr	r2, [pc, #200]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fe4:	4b30      	ldr	r3, [pc, #192]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003008:	4a27      	ldr	r2, [pc, #156]	; (80030a8 <HAL_GPIO_Init+0x334>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003032:	4a1d      	ldr	r2, [pc, #116]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <HAL_GPIO_Init+0x334>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <HAL_GPIO_Init+0x334>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3301      	adds	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b0f      	cmp	r3, #15
 800306c:	f67f ae90 	bls.w	8002d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40013800 	.word	0x40013800
 8003088:	40020000 	.word	0x40020000
 800308c:	40020400 	.word	0x40020400
 8003090:	40020800 	.word	0x40020800
 8003094:	40020c00 	.word	0x40020c00
 8003098:	40021000 	.word	0x40021000
 800309c:	40021400 	.word	0x40021400
 80030a0:	40021800 	.word	0x40021800
 80030a4:	40021c00 	.word	0x40021c00
 80030a8:	40013c00 	.word	0x40013c00

080030ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	807b      	strh	r3, [r7, #2]
 80030b8:	4613      	mov	r3, r2
 80030ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030bc:	787b      	ldrb	r3, [r7, #1]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030c8:	e003      	b.n	80030d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	041a      	lsls	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	619a      	str	r2, [r3, #24]
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e264      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d075      	beq.n	80031ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fe:	4ba3      	ldr	r3, [pc, #652]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d00c      	beq.n	8003124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4ba0      	ldr	r3, [pc, #640]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003112:	2b08      	cmp	r3, #8
 8003114:	d112      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	4b9d      	ldr	r3, [pc, #628]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003122:	d10b      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	4b99      	ldr	r3, [pc, #612]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05b      	beq.n	80031e8 <HAL_RCC_OscConfig+0x108>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d157      	bne.n	80031e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e23f      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d106      	bne.n	8003154 <HAL_RCC_OscConfig+0x74>
 8003146:	4b91      	ldr	r3, [pc, #580]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a90      	ldr	r2, [pc, #576]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e01d      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x98>
 800315e:	4b8b      	ldr	r3, [pc, #556]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a8a      	ldr	r2, [pc, #552]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b88      	ldr	r3, [pc, #544]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a87      	ldr	r2, [pc, #540]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003178:	4b84      	ldr	r3, [pc, #528]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a83      	ldr	r2, [pc, #524]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800317e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b81      	ldr	r3, [pc, #516]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a80      	ldr	r2, [pc, #512]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800318a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7ff f8cc 	bl	8002334 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a0:	f7ff f8c8 	bl	8002334 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e204      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b76      	ldr	r3, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0xc0>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7ff f8b8 	bl	8002334 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c8:	f7ff f8b4 	bl	8002334 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1f0      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	4b6c      	ldr	r3, [pc, #432]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0xe8>
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d063      	beq.n	80032be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f6:	4b65      	ldr	r3, [pc, #404]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b62      	ldr	r3, [pc, #392]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800320a:	2b08      	cmp	r3, #8
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b5f      	ldr	r3, [pc, #380]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	4b5c      	ldr	r3, [pc, #368]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1c4      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003232:	4b56      	ldr	r3, [pc, #344]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4952      	ldr	r1, [pc, #328]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	e03a      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003250:	4b4f      	ldr	r3, [pc, #316]	; (8003390 <HAL_RCC_OscConfig+0x2b0>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7ff f86d 	bl	8002334 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325e:	f7ff f869 	bl	8002334 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1a5      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	4b46      	ldr	r3, [pc, #280]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327c:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4940      	ldr	r1, [pc, #256]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
 8003290:	e015      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003292:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <HAL_RCC_OscConfig+0x2b0>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7ff f84c 	bl	8002334 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a0:	f7ff f848 	bl	8002334 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e184      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d030      	beq.n	800332c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d2:	4b30      	ldr	r3, [pc, #192]	; (8003394 <HAL_RCC_OscConfig+0x2b4>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7ff f82c 	bl	8002334 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e0:	f7ff f828 	bl	8002334 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e164      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	4b26      	ldr	r3, [pc, #152]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x200>
 80032fe:	e015      	b.n	800332c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003300:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_OscConfig+0x2b4>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003306:	f7ff f815 	bl	8002334 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330e:	f7ff f811 	bl	8002334 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e14d      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a0 	beq.w	800347a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b0f      	ldr	r3, [pc, #60]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a0e      	ldr	r2, [pc, #56]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_OscConfig+0x2b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d121      	bne.n	80033ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_RCC_OscConfig+0x2b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_RCC_OscConfig+0x2b8>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7fe ffd7 	bl	8002334 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	e011      	b.n	80033ae <HAL_RCC_OscConfig+0x2ce>
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800
 8003390:	42470000 	.word	0x42470000
 8003394:	42470e80 	.word	0x42470e80
 8003398:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7fe ffca 	bl	8002334 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e106      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ae:	4b85      	ldr	r3, [pc, #532]	; (80035c4 <HAL_RCC_OscConfig+0x4e4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d106      	bne.n	80033d0 <HAL_RCC_OscConfig+0x2f0>
 80033c2:	4b81      	ldr	r3, [pc, #516]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a80      	ldr	r2, [pc, #512]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
 80033ce:	e01c      	b.n	800340a <HAL_RCC_OscConfig+0x32a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x312>
 80033d8:	4b7b      	ldr	r3, [pc, #492]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4a7a      	ldr	r2, [pc, #488]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	4b78      	ldr	r3, [pc, #480]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a77      	ldr	r2, [pc, #476]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
 80033f0:	e00b      	b.n	800340a <HAL_RCC_OscConfig+0x32a>
 80033f2:	4b75      	ldr	r3, [pc, #468]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4a74      	ldr	r2, [pc, #464]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6713      	str	r3, [r2, #112]	; 0x70
 80033fe:	4b72      	ldr	r3, [pc, #456]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a71      	ldr	r2, [pc, #452]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003412:	f7fe ff8f 	bl	8002334 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fe ff8b 	bl	8002334 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0c5      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	4b65      	ldr	r3, [pc, #404]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ee      	beq.n	800341a <HAL_RCC_OscConfig+0x33a>
 800343c:	e014      	b.n	8003468 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343e:	f7fe ff79 	bl	8002334 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fe ff75 	bl	8002334 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e0af      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	4b5a      	ldr	r3, [pc, #360]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a55      	ldr	r2, [pc, #340]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 809b 	beq.w	80035ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003484:	4b50      	ldr	r3, [pc, #320]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d05c      	beq.n	800354a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d141      	bne.n	800351c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <HAL_RCC_OscConfig+0x4ec>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe ff49 	bl	8002334 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe ff45 	bl	8002334 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e081      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b8:	4b43      	ldr	r3, [pc, #268]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	019b      	lsls	r3, r3, #6
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	3b01      	subs	r3, #1
 80034de:	041b      	lsls	r3, r3, #16
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	061b      	lsls	r3, r3, #24
 80034e8:	4937      	ldr	r1, [pc, #220]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ee:	4b37      	ldr	r3, [pc, #220]	; (80035cc <HAL_RCC_OscConfig+0x4ec>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe ff1e 	bl	8002334 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe ff1a 	bl	8002334 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e056      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	4b2e      	ldr	r3, [pc, #184]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x41c>
 800351a:	e04e      	b.n	80035ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x4ec>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe ff07 	bl	8002334 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe ff03 	bl	8002334 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e03f      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353c:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f0      	bne.n	800352a <HAL_RCC_OscConfig+0x44a>
 8003548:	e037      	b.n	80035ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e032      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003556:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d028      	beq.n	80035b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d121      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d11a      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003586:	4013      	ands	r3, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800358c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800358e:	4293      	cmp	r3, r2
 8003590:	d111      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	3b01      	subs	r3, #1
 80035a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40007000 	.word	0x40007000
 80035c8:	40023800 	.word	0x40023800
 80035cc:	42470060 	.word	0x42470060

080035d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0cc      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b68      	ldr	r3, [pc, #416]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d90c      	bls.n	800360c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b65      	ldr	r3, [pc, #404]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b63      	ldr	r3, [pc, #396]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b8      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003624:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800362e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800363c:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b50      	ldr	r3, [pc, #320]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	494d      	ldr	r1, [pc, #308]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d044      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b47      	ldr	r3, [pc, #284]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d119      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e07f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d003      	beq.n	800368e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	2b03      	cmp	r3, #3
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b3f      	ldr	r3, [pc, #252]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3b      	ldr	r3, [pc, #236]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e067      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4934      	ldr	r1, [pc, #208]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c0:	f7fe fe38 	bl	8002334 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fe fe34 	bl	8002334 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e04f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2b      	ldr	r3, [pc, #172]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d20c      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e032      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4916      	ldr	r1, [pc, #88]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003756:	f000 f821 	bl	800379c <HAL_RCC_GetSysClockFreq>
 800375a:	4602      	mov	r2, r0
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	490a      	ldr	r1, [pc, #40]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	5ccb      	ldrb	r3, [r1, r3]
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fd98 	bl	80022ac <HAL_InitTick>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023c00 	.word	0x40023c00
 800378c:	40023800 	.word	0x40023800
 8003790:	08005ad0 	.word	0x08005ad0
 8003794:	20000050 	.word	0x20000050
 8003798:	20000054 	.word	0x20000054

0800379c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800379c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	2300      	movs	r3, #0
 80037ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b4:	4b67      	ldr	r3, [pc, #412]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d00d      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x40>
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	f200 80bd 	bhi.w	8003940 <HAL_RCC_GetSysClockFreq+0x1a4>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ce:	e0b7      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037d0:	4b61      	ldr	r3, [pc, #388]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037d2:	60bb      	str	r3, [r7, #8]
       break;
 80037d4:	e0b7      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d6:	4b61      	ldr	r3, [pc, #388]	; (800395c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80037d8:	60bb      	str	r3, [r7, #8]
      break;
 80037da:	e0b4      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037dc:	4b5d      	ldr	r3, [pc, #372]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e6:	4b5b      	ldr	r3, [pc, #364]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04d      	beq.n	800388e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f2:	4b58      	ldr	r3, [pc, #352]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	461a      	mov	r2, r3
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	ea02 0800 	and.w	r8, r2, r0
 800380a:	ea03 0901 	and.w	r9, r3, r1
 800380e:	4640      	mov	r0, r8
 8003810:	4649      	mov	r1, r9
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	014b      	lsls	r3, r1, #5
 800381c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003820:	0142      	lsls	r2, r0, #5
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	ebb0 0008 	subs.w	r0, r0, r8
 800382a:	eb61 0109 	sbc.w	r1, r1, r9
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	018b      	lsls	r3, r1, #6
 8003838:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800383c:	0182      	lsls	r2, r0, #6
 800383e:	1a12      	subs	r2, r2, r0
 8003840:	eb63 0301 	sbc.w	r3, r3, r1
 8003844:	f04f 0000 	mov.w	r0, #0
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	00d9      	lsls	r1, r3, #3
 800384e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003852:	00d0      	lsls	r0, r2, #3
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	eb12 0208 	adds.w	r2, r2, r8
 800385c:	eb43 0309 	adc.w	r3, r3, r9
 8003860:	f04f 0000 	mov.w	r0, #0
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	0259      	lsls	r1, r3, #9
 800386a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800386e:	0250      	lsls	r0, r2, #9
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	461a      	mov	r2, r3
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	f7fc fca2 	bl	80001c8 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e04a      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388e:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	461a      	mov	r2, r3
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	ea02 0400 	and.w	r4, r2, r0
 80038a6:	ea03 0501 	and.w	r5, r3, r1
 80038aa:	4620      	mov	r0, r4
 80038ac:	4629      	mov	r1, r5
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	014b      	lsls	r3, r1, #5
 80038b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038bc:	0142      	lsls	r2, r0, #5
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	1b00      	subs	r0, r0, r4
 80038c4:	eb61 0105 	sbc.w	r1, r1, r5
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	018b      	lsls	r3, r1, #6
 80038d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038d6:	0182      	lsls	r2, r0, #6
 80038d8:	1a12      	subs	r2, r2, r0
 80038da:	eb63 0301 	sbc.w	r3, r3, r1
 80038de:	f04f 0000 	mov.w	r0, #0
 80038e2:	f04f 0100 	mov.w	r1, #0
 80038e6:	00d9      	lsls	r1, r3, #3
 80038e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038ec:	00d0      	lsls	r0, r2, #3
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	1912      	adds	r2, r2, r4
 80038f4:	eb45 0303 	adc.w	r3, r5, r3
 80038f8:	f04f 0000 	mov.w	r0, #0
 80038fc:	f04f 0100 	mov.w	r1, #0
 8003900:	0299      	lsls	r1, r3, #10
 8003902:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003906:	0290      	lsls	r0, r2, #10
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	461a      	mov	r2, r3
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	f7fc fc56 	bl	80001c8 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4613      	mov	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	3301      	adds	r3, #1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	60bb      	str	r3, [r7, #8]
      break;
 800393e:	e002      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003942:	60bb      	str	r3, [r7, #8]
      break;
 8003944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003946:	68bb      	ldr	r3, [r7, #8]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	00f42400 	.word	0x00f42400
 800395c:	007a1200 	.word	0x007a1200

08003960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_RCC_GetHCLKFreq+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000050 	.word	0x20000050

08003978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800397c:	f7ff fff0 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4903      	ldr	r1, [pc, #12]	; (800399c <HAL_RCC_GetPCLK1Freq+0x24>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	08005ae0 	.word	0x08005ae0

080039a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a4:	f7ff ffdc 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	0b5b      	lsrs	r3, r3, #13
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4903      	ldr	r1, [pc, #12]	; (80039c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40023800 	.word	0x40023800
 80039c4:	08005ae0 	.word	0x08005ae0

080039c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e041      	b.n	8003a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fffa 	bl	80019e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f000 fce6 	bl	80043d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d001      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e04e      	b.n	8003b1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <HAL_TIM_Base_Start_IT+0xc4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d022      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d01d      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d018      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <HAL_TIM_Base_Start_IT+0xcc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00e      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d111      	bne.n	8003b0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d010      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0a:	e007      	b.n	8003b1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40010000 	.word	0x40010000
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40010400 	.word	0x40010400
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40001800 	.word	0x40001800

08003b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e041      	b.n	8003bde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd ffc2 	bl	8001af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f000 fc26 	bl	80043d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d109      	bne.n	8003c0c <HAL_TIM_PWM_Start+0x24>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	bf14      	ite	ne
 8003c04:	2301      	movne	r3, #1
 8003c06:	2300      	moveq	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e022      	b.n	8003c52 <HAL_TIM_PWM_Start+0x6a>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d109      	bne.n	8003c26 <HAL_TIM_PWM_Start+0x3e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e015      	b.n	8003c52 <HAL_TIM_PWM_Start+0x6a>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d109      	bne.n	8003c40 <HAL_TIM_PWM_Start+0x58>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	bf14      	ite	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	2300      	moveq	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e008      	b.n	8003c52 <HAL_TIM_PWM_Start+0x6a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	bf14      	ite	ne
 8003c4c:	2301      	movne	r3, #1
 8003c4e:	2300      	moveq	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e07c      	b.n	8003d54 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_PWM_Start+0x82>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c68:	e013      	b.n	8003c92 <HAL_TIM_PWM_Start+0xaa>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_PWM_Start+0x92>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c78:	e00b      	b.n	8003c92 <HAL_TIM_PWM_Start+0xaa>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_PWM_Start+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c88:	e003      	b.n	8003c92 <HAL_TIM_PWM_Start+0xaa>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2201      	movs	r2, #1
 8003c98:	6839      	ldr	r1, [r7, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fdec 	bl	8004878 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a2d      	ldr	r2, [pc, #180]	; (8003d5c <HAL_TIM_PWM_Start+0x174>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_TIM_PWM_Start+0xcc>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a2c      	ldr	r2, [pc, #176]	; (8003d60 <HAL_TIM_PWM_Start+0x178>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIM_PWM_Start+0xd0>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <HAL_TIM_PWM_Start+0xd2>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a22      	ldr	r2, [pc, #136]	; (8003d5c <HAL_TIM_PWM_Start+0x174>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d022      	beq.n	8003d1e <HAL_TIM_PWM_Start+0x136>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce0:	d01d      	beq.n	8003d1e <HAL_TIM_PWM_Start+0x136>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <HAL_TIM_PWM_Start+0x17c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d018      	beq.n	8003d1e <HAL_TIM_PWM_Start+0x136>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <HAL_TIM_PWM_Start+0x180>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_TIM_PWM_Start+0x136>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1c      	ldr	r2, [pc, #112]	; (8003d6c <HAL_TIM_PWM_Start+0x184>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_TIM_PWM_Start+0x136>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <HAL_TIM_PWM_Start+0x178>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d009      	beq.n	8003d1e <HAL_TIM_PWM_Start+0x136>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <HAL_TIM_PWM_Start+0x188>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_TIM_PWM_Start+0x136>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a16      	ldr	r2, [pc, #88]	; (8003d74 <HAL_TIM_PWM_Start+0x18c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d111      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	d010      	beq.n	8003d52 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	e007      	b.n	8003d52 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40010400 	.word	0x40010400
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	40000c00 	.word	0x40000c00
 8003d70:	40014000 	.word	0x40014000
 8003d74:	40001800 	.word	0x40001800

08003d78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e097      	b.n	8003ebc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fd fd1f 	bl	80017e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dbc:	f023 0307 	bic.w	r3, r3, #7
 8003dc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4610      	mov	r0, r2
 8003dce:	f000 fb03 	bl	80043d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfa:	f023 0303 	bic.w	r3, r3, #3
 8003dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e18:	f023 030c 	bic.w	r3, r3, #12
 8003e1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	4313      	orrs	r3, r2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	011a      	lsls	r2, r3, #4
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	031b      	lsls	r3, r3, #12
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003edc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ee4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003eec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d110      	bne.n	8003f16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d102      	bne.n	8003f00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003efa:	7b7b      	ldrb	r3, [r7, #13]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d001      	beq.n	8003f04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e069      	b.n	8003fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f14:	e031      	b.n	8003f7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d110      	bne.n	8003f3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f1c:	7bbb      	ldrb	r3, [r7, #14]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d102      	bne.n	8003f28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f22:	7b3b      	ldrb	r3, [r7, #12]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d001      	beq.n	8003f2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e055      	b.n	8003fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f3c:	e01d      	b.n	8003f7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d108      	bne.n	8003f56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f44:	7bbb      	ldrb	r3, [r7, #14]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f4a:	7b7b      	ldrb	r3, [r7, #13]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d102      	bne.n	8003f56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f50:	7b3b      	ldrb	r3, [r7, #12]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d001      	beq.n	8003f5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e03e      	b.n	8003fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_TIM_Encoder_Start+0xc4>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d008      	beq.n	8003f98 <HAL_TIM_Encoder_Start+0xd4>
 8003f86:	e00f      	b.n	8003fa8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fc71 	bl	8004878 <TIM_CCxChannelCmd>
      break;
 8003f96:	e016      	b.n	8003fc6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	2104      	movs	r1, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fc69 	bl	8004878 <TIM_CCxChannelCmd>
      break;
 8003fa6:	e00e      	b.n	8003fc6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2201      	movs	r2, #1
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fc61 	bl	8004878 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fc5a 	bl	8004878 <TIM_CCxChannelCmd>
      break;
 8003fc4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0201 	orr.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d122      	bne.n	800403c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b02      	cmp	r3, #2
 8004002:	d11b      	bne.n	800403c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0202 	mvn.w	r2, #2
 800400c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f9ba 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 8004028:	e005      	b.n	8004036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f9ac 	bl	8004388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f9bd 	bl	80043b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b04      	cmp	r3, #4
 8004048:	d122      	bne.n	8004090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b04      	cmp	r3, #4
 8004056:	d11b      	bne.n	8004090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0204 	mvn.w	r2, #4
 8004060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2202      	movs	r2, #2
 8004066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f990 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f982 	bl	8004388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f993 	bl	80043b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b08      	cmp	r3, #8
 800409c:	d122      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d11b      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0208 	mvn.w	r2, #8
 80040b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2204      	movs	r2, #4
 80040ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f966 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 80040d0:	e005      	b.n	80040de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f958 	bl	8004388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f969 	bl	80043b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d122      	bne.n	8004138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d11b      	bne.n	8004138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0210 	mvn.w	r2, #16
 8004108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2208      	movs	r2, #8
 800410e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f93c 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f92e 	bl	8004388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f93f 	bl	80043b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b01      	cmp	r3, #1
 8004144:	d10e      	bne.n	8004164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0201 	mvn.w	r2, #1
 800415c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f908 	bl	8004374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d10e      	bne.n	8004190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d107      	bne.n	8004190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fc20 	bl	80049d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d10e      	bne.n	80041bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d107      	bne.n	80041bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f904 	bl	80043c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d107      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0220 	mvn.w	r2, #32
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fbea 	bl	80049bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800420a:	2302      	movs	r3, #2
 800420c:	e0ae      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b0c      	cmp	r3, #12
 800421a:	f200 809f 	bhi.w	800435c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004259 	.word	0x08004259
 8004228:	0800435d 	.word	0x0800435d
 800422c:	0800435d 	.word	0x0800435d
 8004230:	0800435d 	.word	0x0800435d
 8004234:	08004299 	.word	0x08004299
 8004238:	0800435d 	.word	0x0800435d
 800423c:	0800435d 	.word	0x0800435d
 8004240:	0800435d 	.word	0x0800435d
 8004244:	080042db 	.word	0x080042db
 8004248:	0800435d 	.word	0x0800435d
 800424c:	0800435d 	.word	0x0800435d
 8004250:	0800435d 	.word	0x0800435d
 8004254:	0800431b 	.word	0x0800431b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f95a 	bl	8004518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0204 	bic.w	r2, r2, #4
 8004282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6999      	ldr	r1, [r3, #24]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	619a      	str	r2, [r3, #24]
      break;
 8004296:	e064      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f9aa 	bl	80045f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6999      	ldr	r1, [r3, #24]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	021a      	lsls	r2, r3, #8
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	619a      	str	r2, [r3, #24]
      break;
 80042d8:	e043      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f9ff 	bl	80046e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0208 	orr.w	r2, r2, #8
 80042f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0204 	bic.w	r2, r2, #4
 8004304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69d9      	ldr	r1, [r3, #28]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	61da      	str	r2, [r3, #28]
      break;
 8004318:	e023      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fa53 	bl	80047cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69d9      	ldr	r1, [r3, #28]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	021a      	lsls	r2, r3, #8
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	61da      	str	r2, [r3, #28]
      break;
 800435a:	e002      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
      break;
 8004360:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a40      	ldr	r2, [pc, #256]	; (80044ec <TIM_Base_SetConfig+0x114>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d013      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f6:	d00f      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a3d      	ldr	r2, [pc, #244]	; (80044f0 <TIM_Base_SetConfig+0x118>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00b      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a3c      	ldr	r2, [pc, #240]	; (80044f4 <TIM_Base_SetConfig+0x11c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d007      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a3b      	ldr	r2, [pc, #236]	; (80044f8 <TIM_Base_SetConfig+0x120>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a3a      	ldr	r2, [pc, #232]	; (80044fc <TIM_Base_SetConfig+0x124>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d108      	bne.n	800442a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a2f      	ldr	r2, [pc, #188]	; (80044ec <TIM_Base_SetConfig+0x114>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d02b      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004438:	d027      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a2c      	ldr	r2, [pc, #176]	; (80044f0 <TIM_Base_SetConfig+0x118>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d023      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a2b      	ldr	r2, [pc, #172]	; (80044f4 <TIM_Base_SetConfig+0x11c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01f      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2a      	ldr	r2, [pc, #168]	; (80044f8 <TIM_Base_SetConfig+0x120>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01b      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a29      	ldr	r2, [pc, #164]	; (80044fc <TIM_Base_SetConfig+0x124>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d017      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a28      	ldr	r2, [pc, #160]	; (8004500 <TIM_Base_SetConfig+0x128>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a27      	ldr	r2, [pc, #156]	; (8004504 <TIM_Base_SetConfig+0x12c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00f      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a26      	ldr	r2, [pc, #152]	; (8004508 <TIM_Base_SetConfig+0x130>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00b      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a25      	ldr	r2, [pc, #148]	; (800450c <TIM_Base_SetConfig+0x134>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d007      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a24      	ldr	r2, [pc, #144]	; (8004510 <TIM_Base_SetConfig+0x138>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a23      	ldr	r2, [pc, #140]	; (8004514 <TIM_Base_SetConfig+0x13c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d108      	bne.n	800449c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <TIM_Base_SetConfig+0x114>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_Base_SetConfig+0xf8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a0c      	ldr	r2, [pc, #48]	; (80044fc <TIM_Base_SetConfig+0x124>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d103      	bne.n	80044d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	615a      	str	r2, [r3, #20]
}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800
 80044f8:	40000c00 	.word	0x40000c00
 80044fc:	40010400 	.word	0x40010400
 8004500:	40014000 	.word	0x40014000
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800
 800450c:	40001800 	.word	0x40001800
 8004510:	40001c00 	.word	0x40001c00
 8004514:	40002000 	.word	0x40002000

08004518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f023 0201 	bic.w	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f023 0302 	bic.w	r3, r3, #2
 8004560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a20      	ldr	r2, [pc, #128]	; (80045f0 <TIM_OC1_SetConfig+0xd8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_OC1_SetConfig+0x64>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <TIM_OC1_SetConfig+0xdc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d10c      	bne.n	8004596 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 0308 	bic.w	r3, r3, #8
 8004582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f023 0304 	bic.w	r3, r3, #4
 8004594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <TIM_OC1_SetConfig+0xd8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d003      	beq.n	80045a6 <TIM_OC1_SetConfig+0x8e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <TIM_OC1_SetConfig+0xdc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d111      	bne.n	80045ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	621a      	str	r2, [r3, #32]
}
 80045e4:	bf00      	nop
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40010000 	.word	0x40010000
 80045f4:	40010400 	.word	0x40010400

080045f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0210 	bic.w	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0320 	bic.w	r3, r3, #32
 8004642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a22      	ldr	r2, [pc, #136]	; (80046dc <TIM_OC2_SetConfig+0xe4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_OC2_SetConfig+0x68>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <TIM_OC2_SetConfig+0xe8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10d      	bne.n	800467c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <TIM_OC2_SetConfig+0xe4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_OC2_SetConfig+0x94>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <TIM_OC2_SetConfig+0xe8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d113      	bne.n	80046b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800469a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40010000 	.word	0x40010000
 80046e0:	40010400 	.word	0x40010400

080046e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0303 	bic.w	r3, r3, #3
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800472c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a21      	ldr	r2, [pc, #132]	; (80047c4 <TIM_OC3_SetConfig+0xe0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <TIM_OC3_SetConfig+0x66>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a20      	ldr	r2, [pc, #128]	; (80047c8 <TIM_OC3_SetConfig+0xe4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10d      	bne.n	8004766 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a16      	ldr	r2, [pc, #88]	; (80047c4 <TIM_OC3_SetConfig+0xe0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_OC3_SetConfig+0x92>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <TIM_OC3_SetConfig+0xe4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d113      	bne.n	800479e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800477c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	621a      	str	r2, [r3, #32]
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40010400 	.word	0x40010400

080047cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	031b      	lsls	r3, r3, #12
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a12      	ldr	r2, [pc, #72]	; (8004870 <TIM_OC4_SetConfig+0xa4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_OC4_SetConfig+0x68>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a11      	ldr	r2, [pc, #68]	; (8004874 <TIM_OC4_SetConfig+0xa8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d109      	bne.n	8004848 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800483a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	019b      	lsls	r3, r3, #6
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40010000 	.word	0x40010000
 8004874:	40010400 	.word	0x40010400

08004878 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	2201      	movs	r2, #1
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1a      	ldr	r2, [r3, #32]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	43db      	mvns	r3, r3
 800489a:	401a      	ands	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1a      	ldr	r2, [r3, #32]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d8:	2302      	movs	r3, #2
 80048da:	e05a      	b.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a21      	ldr	r2, [pc, #132]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d022      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004928:	d01d      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d018      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00e      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d009      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a17      	ldr	r2, [pc, #92]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d10c      	bne.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800496c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4313      	orrs	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40010400 	.word	0x40010400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40001800 	.word	0x40001800

080049bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e03f      	b.n	8004a76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fd f9c4 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2224      	movs	r2, #36	; 0x24
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fe51 	bl	80056d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d11d      	bne.n	8004ad4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <HAL_UART_Receive_DMA+0x26>
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e016      	b.n	8004ad6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_UART_Receive_DMA+0x38>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e00f      	b.n	8004ad6 <HAL_UART_Receive_DMA+0x58>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 fba4 	bl	8005218 <UART_Start_Receive_DMA>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	e000      	b.n	8004ad6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
  }
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b0ba      	sub	sp, #232	; 0xe8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10f      	bne.n	8004b46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_UART_IRQHandler+0x66>
 8004b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fd0b 	bl	800555a <UART_Receive_IT>
      return;
 8004b44:	e256      	b.n	8004ff4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80de 	beq.w	8004d0c <HAL_UART_IRQHandler+0x22c>
 8004b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d106      	bne.n	8004b6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 80d1 	beq.w	8004d0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_UART_IRQHandler+0xae>
 8004b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f043 0201 	orr.w	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <HAL_UART_IRQHandler+0xd2>
 8004b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f043 0202 	orr.w	r2, r3, #2
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_UART_IRQHandler+0xf6>
 8004bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f043 0204 	orr.w	r2, r3, #4
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d011      	beq.n	8004c06 <HAL_UART_IRQHandler+0x126>
 8004be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d105      	bne.n	8004bfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f043 0208 	orr.w	r2, r3, #8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 81ed 	beq.w	8004fea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_UART_IRQHandler+0x14e>
 8004c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fc96 	bl	800555a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c38:	2b40      	cmp	r3, #64	; 0x40
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <HAL_UART_IRQHandler+0x17a>
 8004c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d04f      	beq.n	8004cfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fb9e 	bl	800539c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6a:	2b40      	cmp	r3, #64	; 0x40
 8004c6c:	d141      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3314      	adds	r3, #20
 8004c74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1d9      	bne.n	8004c6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d013      	beq.n	8004cea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	4a7d      	ldr	r2, [pc, #500]	; (8004ebc <HAL_UART_IRQHandler+0x3dc>)
 8004cc8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fd fdc4 	bl	800285c <HAL_DMA_Abort_IT>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d016      	beq.n	8004d08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce8:	e00e      	b.n	8004d08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fb feee 	bl	8000acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	e00a      	b.n	8004d08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fb feea 	bl	8000acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	e006      	b.n	8004d08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fb fee6 	bl	8000acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d06:	e170      	b.n	8004fea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	bf00      	nop
    return;
 8004d0a:	e16e      	b.n	8004fea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	f040 814a 	bne.w	8004faa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 8143 	beq.w	8004faa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 813c 	beq.w	8004faa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	f040 80b4 	bne.w	8004ec0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 8140 	beq.w	8004fee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d76:	429a      	cmp	r2, r3
 8004d78:	f080 8139 	bcs.w	8004fee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8e:	f000 8088 	beq.w	8004ea2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	330c      	adds	r3, #12
 8004d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004dbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004dca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1d9      	bne.n	8004d92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3314      	adds	r3, #20
 8004dfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e1      	bne.n	8004dde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3314      	adds	r3, #20
 8004e20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e3      	bne.n	8004e1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e72:	f023 0310 	bic.w	r3, r3, #16
 8004e76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e84:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e3      	bne.n	8004e60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fd fc6d 	bl	800277c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f8ac 	bl	8005010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eb8:	e099      	b.n	8004fee <HAL_UART_IRQHandler+0x50e>
 8004eba:	bf00      	nop
 8004ebc:	08005463 	.word	0x08005463
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 808b 	beq.w	8004ff2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8086 	beq.w	8004ff2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f0a:	647a      	str	r2, [r7, #68]	; 0x44
 8004f0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e3      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f42:	633a      	str	r2, [r7, #48]	; 0x30
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e3      	bne.n	8004f1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0310 	bic.w	r3, r3, #16
 8004f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f88:	61fa      	str	r2, [r7, #28]
 8004f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	69b9      	ldr	r1, [r7, #24]
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	617b      	str	r3, [r7, #20]
   return(result);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e3      	bne.n	8004f64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f834 	bl	8005010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fa8:	e023      	b.n	8004ff2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <HAL_UART_IRQHandler+0x4ea>
 8004fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fa61 	bl	800548a <UART_Transmit_IT>
    return;
 8004fc8:	e014      	b.n	8004ff4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x514>
 8004fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 faa1 	bl	800552a <UART_EndTransmit_IT>
    return;
 8004fe8:	e004      	b.n	8004ff4 <HAL_UART_IRQHandler+0x514>
    return;
 8004fea:	bf00      	nop
 8004fec:	e002      	b.n	8004ff4 <HAL_UART_IRQHandler+0x514>
      return;
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <HAL_UART_IRQHandler+0x514>
      return;
 8004ff2:	bf00      	nop
  }
}
 8004ff4:	37e8      	adds	r7, #232	; 0xe8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop

08004ffc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b09c      	sub	sp, #112	; 0x70
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d172      	bne.n	800512a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005046:	2200      	movs	r2, #0
 8005048:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800504a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	330c      	adds	r3, #12
 8005050:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800505a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005060:	66bb      	str	r3, [r7, #104]	; 0x68
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	330c      	adds	r3, #12
 8005068:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800506a:	65ba      	str	r2, [r7, #88]	; 0x58
 800506c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005070:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e5      	bne.n	800504a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3314      	adds	r3, #20
 8005084:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	667b      	str	r3, [r7, #100]	; 0x64
 8005096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3314      	adds	r3, #20
 800509c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800509e:	647a      	str	r2, [r7, #68]	; 0x44
 80050a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e5      	bne.n	800507e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	623b      	str	r3, [r7, #32]
   return(result);
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c8:	663b      	str	r3, [r7, #96]	; 0x60
 80050ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3314      	adds	r3, #20
 80050d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050d2:	633a      	str	r2, [r7, #48]	; 0x30
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e5      	bne.n	80050b2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d119      	bne.n	800512a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	330c      	adds	r3, #12
 80050fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	60fb      	str	r3, [r7, #12]
   return(result);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f023 0310 	bic.w	r3, r3, #16
 800510c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800510e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	330c      	adds	r3, #12
 8005114:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005116:	61fa      	str	r2, [r7, #28]
 8005118:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	69b9      	ldr	r1, [r7, #24]
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	617b      	str	r3, [r7, #20]
   return(result);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e5      	bne.n	80050f6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800512a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	2b01      	cmp	r3, #1
 8005130:	d106      	bne.n	8005140 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005136:	4619      	mov	r1, r3
 8005138:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800513a:	f7ff ff69 	bl	8005010 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800513e:	e002      	b.n	8005146 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005140:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005142:	f7fb fc7d 	bl	8000a40 <HAL_UART_RxCpltCallback>
}
 8005146:	bf00      	nop
 8005148:	3770      	adds	r7, #112	; 0x70
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	2b01      	cmp	r3, #1
 8005162:	d108      	bne.n	8005176 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	b29b      	uxth	r3, r3
 800516c:	4619      	mov	r1, r3
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff ff4e 	bl	8005010 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005174:	e002      	b.n	800517c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7fb fc28 	bl	80009cc <HAL_UART_RxHalfCpltCallback>
}
 800517c:	bf00      	nop
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a0:	2b80      	cmp	r3, #128	; 0x80
 80051a2:	bf0c      	ite	eq
 80051a4:	2301      	moveq	r3, #1
 80051a6:	2300      	movne	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b21      	cmp	r3, #33	; 0x21
 80051b6:	d108      	bne.n	80051ca <UART_DMAError+0x46>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2200      	movs	r2, #0
 80051c2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80051c4:	68b8      	ldr	r0, [r7, #8]
 80051c6:	f000 f8c1 	bl	800534c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b22      	cmp	r3, #34	; 0x22
 80051ea:	d108      	bne.n	80051fe <UART_DMAError+0x7a>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d005      	beq.n	80051fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2200      	movs	r2, #0
 80051f6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80051f8:	68b8      	ldr	r0, [r7, #8]
 80051fa:	f000 f8cf 	bl	800539c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f043 0210 	orr.w	r2, r3, #16
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800520a:	68b8      	ldr	r0, [r7, #8]
 800520c:	f7fb fc5e 	bl	8000acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005210:	bf00      	nop
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b098      	sub	sp, #96	; 0x60
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	88fa      	ldrh	r2, [r7, #6]
 8005230:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2222      	movs	r2, #34	; 0x22
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	4a3e      	ldr	r2, [pc, #248]	; (8005340 <UART_Start_Receive_DMA+0x128>)
 8005246:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	4a3d      	ldr	r2, [pc, #244]	; (8005344 <UART_Start_Receive_DMA+0x12c>)
 800524e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	4a3c      	ldr	r2, [pc, #240]	; (8005348 <UART_Start_Receive_DMA+0x130>)
 8005256:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	2200      	movs	r2, #0
 800525e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005260:	f107 0308 	add.w	r3, r7, #8
 8005264:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3304      	adds	r3, #4
 8005270:	4619      	mov	r1, r3
 8005272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	f7fd fa28 	bl	80026cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	330c      	adds	r3, #12
 80052a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80052bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80052c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80052c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e5      	bne.n	800529a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3314      	adds	r3, #20
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	657b      	str	r3, [r7, #84]	; 0x54
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3314      	adds	r3, #20
 80052ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e5      	bne.n	80052ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3314      	adds	r3, #20
 8005308:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	617b      	str	r3, [r7, #20]
   return(result);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005318:	653b      	str	r3, [r7, #80]	; 0x50
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3314      	adds	r3, #20
 8005320:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005322:	627a      	str	r2, [r7, #36]	; 0x24
 8005324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6a39      	ldr	r1, [r7, #32]
 8005328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e5      	bne.n	8005302 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3760      	adds	r7, #96	; 0x60
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	08005029 	.word	0x08005029
 8005344:	0800514f 	.word	0x0800514f
 8005348:	08005185 	.word	0x08005185

0800534c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	60bb      	str	r3, [r7, #8]
   return(result);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	61ba      	str	r2, [r7, #24]
 8005376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6979      	ldr	r1, [r7, #20]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	613b      	str	r3, [r7, #16]
   return(result);
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e5      	bne.n	8005354 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005390:	bf00      	nop
 8005392:	3724      	adds	r7, #36	; 0x24
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b095      	sub	sp, #84	; 0x54
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330c      	adds	r3, #12
 80053c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053c4:	643a      	str	r2, [r7, #64]	; 0x40
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e5      	bne.n	80053a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3314      	adds	r3, #20
 80053de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3314      	adds	r3, #20
 80053f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e5      	bne.n	80053d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	2b01      	cmp	r3, #1
 8005412:	d119      	bne.n	8005448 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	60bb      	str	r3, [r7, #8]
   return(result);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f023 0310 	bic.w	r3, r3, #16
 800542a:	647b      	str	r3, [r7, #68]	; 0x44
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005434:	61ba      	str	r2, [r7, #24]
 8005436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6979      	ldr	r1, [r7, #20]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	613b      	str	r3, [r7, #16]
   return(result);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e5      	bne.n	8005414 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005456:	bf00      	nop
 8005458:	3754      	adds	r7, #84	; 0x54
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f7fb fb25 	bl	8000acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b21      	cmp	r3, #33	; 0x21
 800549c:	d13e      	bne.n	800551c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a6:	d114      	bne.n	80054d2 <UART_Transmit_IT+0x48>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d110      	bne.n	80054d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	1c9a      	adds	r2, r3, #2
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	621a      	str	r2, [r3, #32]
 80054d0:	e008      	b.n	80054e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	1c59      	adds	r1, r3, #1
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6211      	str	r1, [r2, #32]
 80054dc:	781a      	ldrb	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4619      	mov	r1, r3
 80054f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10f      	bne.n	8005518 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005506:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005516:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e000      	b.n	800551e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005540:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff fd56 	bl	8004ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b08c      	sub	sp, #48	; 0x30
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b22      	cmp	r3, #34	; 0x22
 800556c:	f040 80ab 	bne.w	80056c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005578:	d117      	bne.n	80055aa <UART_Receive_IT+0x50>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d113      	bne.n	80055aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	b29b      	uxth	r3, r3
 8005594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005598:	b29a      	uxth	r2, r3
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	1c9a      	adds	r2, r3, #2
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	629a      	str	r2, [r3, #40]	; 0x28
 80055a8:	e026      	b.n	80055f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055bc:	d007      	beq.n	80055ce <UART_Receive_IT+0x74>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10a      	bne.n	80055dc <UART_Receive_IT+0x82>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	e008      	b.n	80055ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29b      	uxth	r3, r3
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4619      	mov	r1, r3
 8005606:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005608:	2b00      	cmp	r3, #0
 800560a:	d15a      	bne.n	80056c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0220 	bic.w	r2, r2, #32
 800561a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800562a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695a      	ldr	r2, [r3, #20]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	2b01      	cmp	r3, #1
 800564a:	d135      	bne.n	80056b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	613b      	str	r3, [r7, #16]
   return(result);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f023 0310 	bic.w	r3, r3, #16
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005672:	623a      	str	r2, [r7, #32]
 8005674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	69f9      	ldr	r1, [r7, #28]
 8005678:	6a3a      	ldr	r2, [r7, #32]
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e5      	bne.n	8005652 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d10a      	bne.n	80056aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff fcad 	bl	8005010 <HAL_UARTEx_RxEventCallback>
 80056b6:	e002      	b.n	80056be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fb f9c1 	bl	8000a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	e002      	b.n	80056c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	e000      	b.n	80056c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80056c6:	2302      	movs	r3, #2
  }
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3730      	adds	r7, #48	; 0x30
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	b09f      	sub	sp, #124	; 0x7c
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e6:	68d9      	ldr	r1, [r3, #12]
 80056e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	ea40 0301 	orr.w	r3, r0, r1
 80056f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	431a      	orrs	r2, r3
 8005702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	4313      	orrs	r3, r2
 8005708:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800570a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005714:	f021 010c 	bic.w	r1, r1, #12
 8005718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800571e:	430b      	orrs	r3, r1
 8005720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800572c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572e:	6999      	ldr	r1, [r3, #24]
 8005730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	ea40 0301 	orr.w	r3, r0, r1
 8005738:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800573a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4bc5      	ldr	r3, [pc, #788]	; (8005a54 <UART_SetConfig+0x384>)
 8005740:	429a      	cmp	r2, r3
 8005742:	d004      	beq.n	800574e <UART_SetConfig+0x7e>
 8005744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4bc3      	ldr	r3, [pc, #780]	; (8005a58 <UART_SetConfig+0x388>)
 800574a:	429a      	cmp	r2, r3
 800574c:	d103      	bne.n	8005756 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800574e:	f7fe f927 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 8005752:	6778      	str	r0, [r7, #116]	; 0x74
 8005754:	e002      	b.n	800575c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005756:	f7fe f90f 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 800575a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800575c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005764:	f040 80b6 	bne.w	80058d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800576a:	461c      	mov	r4, r3
 800576c:	f04f 0500 	mov.w	r5, #0
 8005770:	4622      	mov	r2, r4
 8005772:	462b      	mov	r3, r5
 8005774:	1891      	adds	r1, r2, r2
 8005776:	6439      	str	r1, [r7, #64]	; 0x40
 8005778:	415b      	adcs	r3, r3
 800577a:	647b      	str	r3, [r7, #68]	; 0x44
 800577c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005780:	1912      	adds	r2, r2, r4
 8005782:	eb45 0303 	adc.w	r3, r5, r3
 8005786:	f04f 0000 	mov.w	r0, #0
 800578a:	f04f 0100 	mov.w	r1, #0
 800578e:	00d9      	lsls	r1, r3, #3
 8005790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005794:	00d0      	lsls	r0, r2, #3
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	1911      	adds	r1, r2, r4
 800579c:	6639      	str	r1, [r7, #96]	; 0x60
 800579e:	416b      	adcs	r3, r5
 80057a0:	667b      	str	r3, [r7, #100]	; 0x64
 80057a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	1891      	adds	r1, r2, r2
 80057ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80057b0:	415b      	adcs	r3, r3
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80057bc:	f7fa fd04 	bl	80001c8 <__aeabi_uldivmod>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4ba5      	ldr	r3, [pc, #660]	; (8005a5c <UART_SetConfig+0x38c>)
 80057c6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	011e      	lsls	r6, r3, #4
 80057ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d0:	461c      	mov	r4, r3
 80057d2:	f04f 0500 	mov.w	r5, #0
 80057d6:	4622      	mov	r2, r4
 80057d8:	462b      	mov	r3, r5
 80057da:	1891      	adds	r1, r2, r2
 80057dc:	6339      	str	r1, [r7, #48]	; 0x30
 80057de:	415b      	adcs	r3, r3
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34
 80057e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80057e6:	1912      	adds	r2, r2, r4
 80057e8:	eb45 0303 	adc.w	r3, r5, r3
 80057ec:	f04f 0000 	mov.w	r0, #0
 80057f0:	f04f 0100 	mov.w	r1, #0
 80057f4:	00d9      	lsls	r1, r3, #3
 80057f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057fa:	00d0      	lsls	r0, r2, #3
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	1911      	adds	r1, r2, r4
 8005802:	65b9      	str	r1, [r7, #88]	; 0x58
 8005804:	416b      	adcs	r3, r5
 8005806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	461a      	mov	r2, r3
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	1891      	adds	r1, r2, r2
 8005814:	62b9      	str	r1, [r7, #40]	; 0x28
 8005816:	415b      	adcs	r3, r3
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800581e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005822:	f7fa fcd1 	bl	80001c8 <__aeabi_uldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4b8c      	ldr	r3, [pc, #560]	; (8005a5c <UART_SetConfig+0x38c>)
 800582c:	fba3 1302 	umull	r1, r3, r3, r2
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	2164      	movs	r1, #100	; 0x64
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	3332      	adds	r3, #50	; 0x32
 800583e:	4a87      	ldr	r2, [pc, #540]	; (8005a5c <UART_SetConfig+0x38c>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800584c:	441e      	add	r6, r3
 800584e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005850:	4618      	mov	r0, r3
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	1894      	adds	r4, r2, r2
 800585c:	623c      	str	r4, [r7, #32]
 800585e:	415b      	adcs	r3, r3
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
 8005862:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005866:	1812      	adds	r2, r2, r0
 8005868:	eb41 0303 	adc.w	r3, r1, r3
 800586c:	f04f 0400 	mov.w	r4, #0
 8005870:	f04f 0500 	mov.w	r5, #0
 8005874:	00dd      	lsls	r5, r3, #3
 8005876:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800587a:	00d4      	lsls	r4, r2, #3
 800587c:	4622      	mov	r2, r4
 800587e:	462b      	mov	r3, r5
 8005880:	1814      	adds	r4, r2, r0
 8005882:	653c      	str	r4, [r7, #80]	; 0x50
 8005884:	414b      	adcs	r3, r1
 8005886:	657b      	str	r3, [r7, #84]	; 0x54
 8005888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	461a      	mov	r2, r3
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	1891      	adds	r1, r2, r2
 8005894:	61b9      	str	r1, [r7, #24]
 8005896:	415b      	adcs	r3, r3
 8005898:	61fb      	str	r3, [r7, #28]
 800589a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800589e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058a2:	f7fa fc91 	bl	80001c8 <__aeabi_uldivmod>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4b6c      	ldr	r3, [pc, #432]	; (8005a5c <UART_SetConfig+0x38c>)
 80058ac:	fba3 1302 	umull	r1, r3, r3, r2
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	2164      	movs	r1, #100	; 0x64
 80058b4:	fb01 f303 	mul.w	r3, r1, r3
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	3332      	adds	r3, #50	; 0x32
 80058be:	4a67      	ldr	r2, [pc, #412]	; (8005a5c <UART_SetConfig+0x38c>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	f003 0207 	and.w	r2, r3, #7
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4432      	add	r2, r6
 80058d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058d2:	e0b9      	b.n	8005a48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058d6:	461c      	mov	r4, r3
 80058d8:	f04f 0500 	mov.w	r5, #0
 80058dc:	4622      	mov	r2, r4
 80058de:	462b      	mov	r3, r5
 80058e0:	1891      	adds	r1, r2, r2
 80058e2:	6139      	str	r1, [r7, #16]
 80058e4:	415b      	adcs	r3, r3
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058ec:	1912      	adds	r2, r2, r4
 80058ee:	eb45 0303 	adc.w	r3, r5, r3
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f04f 0100 	mov.w	r1, #0
 80058fa:	00d9      	lsls	r1, r3, #3
 80058fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005900:	00d0      	lsls	r0, r2, #3
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	eb12 0804 	adds.w	r8, r2, r4
 800590a:	eb43 0905 	adc.w	r9, r3, r5
 800590e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4618      	mov	r0, r3
 8005914:	f04f 0100 	mov.w	r1, #0
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	008b      	lsls	r3, r1, #2
 8005922:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005926:	0082      	lsls	r2, r0, #2
 8005928:	4640      	mov	r0, r8
 800592a:	4649      	mov	r1, r9
 800592c:	f7fa fc4c 	bl	80001c8 <__aeabi_uldivmod>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4b49      	ldr	r3, [pc, #292]	; (8005a5c <UART_SetConfig+0x38c>)
 8005936:	fba3 2302 	umull	r2, r3, r3, r2
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	011e      	lsls	r6, r3, #4
 800593e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005940:	4618      	mov	r0, r3
 8005942:	f04f 0100 	mov.w	r1, #0
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	1894      	adds	r4, r2, r2
 800594c:	60bc      	str	r4, [r7, #8]
 800594e:	415b      	adcs	r3, r3
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005956:	1812      	adds	r2, r2, r0
 8005958:	eb41 0303 	adc.w	r3, r1, r3
 800595c:	f04f 0400 	mov.w	r4, #0
 8005960:	f04f 0500 	mov.w	r5, #0
 8005964:	00dd      	lsls	r5, r3, #3
 8005966:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800596a:	00d4      	lsls	r4, r2, #3
 800596c:	4622      	mov	r2, r4
 800596e:	462b      	mov	r3, r5
 8005970:	1814      	adds	r4, r2, r0
 8005972:	64bc      	str	r4, [r7, #72]	; 0x48
 8005974:	414b      	adcs	r3, r1
 8005976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	4618      	mov	r0, r3
 800597e:	f04f 0100 	mov.w	r1, #0
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	008b      	lsls	r3, r1, #2
 800598c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005990:	0082      	lsls	r2, r0, #2
 8005992:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005996:	f7fa fc17 	bl	80001c8 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4b2f      	ldr	r3, [pc, #188]	; (8005a5c <UART_SetConfig+0x38c>)
 80059a0:	fba3 1302 	umull	r1, r3, r3, r2
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	2164      	movs	r1, #100	; 0x64
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	3332      	adds	r3, #50	; 0x32
 80059b2:	4a2a      	ldr	r2, [pc, #168]	; (8005a5c <UART_SetConfig+0x38c>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059be:	441e      	add	r6, r3
 80059c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c2:	4618      	mov	r0, r3
 80059c4:	f04f 0100 	mov.w	r1, #0
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	1894      	adds	r4, r2, r2
 80059ce:	603c      	str	r4, [r7, #0]
 80059d0:	415b      	adcs	r3, r3
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d8:	1812      	adds	r2, r2, r0
 80059da:	eb41 0303 	adc.w	r3, r1, r3
 80059de:	f04f 0400 	mov.w	r4, #0
 80059e2:	f04f 0500 	mov.w	r5, #0
 80059e6:	00dd      	lsls	r5, r3, #3
 80059e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059ec:	00d4      	lsls	r4, r2, #3
 80059ee:	4622      	mov	r2, r4
 80059f0:	462b      	mov	r3, r5
 80059f2:	eb12 0a00 	adds.w	sl, r2, r0
 80059f6:	eb43 0b01 	adc.w	fp, r3, r1
 80059fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f04f 0100 	mov.w	r1, #0
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	008b      	lsls	r3, r1, #2
 8005a0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a12:	0082      	lsls	r2, r0, #2
 8005a14:	4650      	mov	r0, sl
 8005a16:	4659      	mov	r1, fp
 8005a18:	f7fa fbd6 	bl	80001c8 <__aeabi_uldivmod>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <UART_SetConfig+0x38c>)
 8005a22:	fba3 1302 	umull	r1, r3, r3, r2
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	2164      	movs	r1, #100	; 0x64
 8005a2a:	fb01 f303 	mul.w	r3, r1, r3
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	3332      	adds	r3, #50	; 0x32
 8005a34:	4a09      	ldr	r2, [pc, #36]	; (8005a5c <UART_SetConfig+0x38c>)
 8005a36:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	f003 020f 	and.w	r2, r3, #15
 8005a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4432      	add	r2, r6
 8005a46:	609a      	str	r2, [r3, #8]
}
 8005a48:	bf00      	nop
 8005a4a:	377c      	adds	r7, #124	; 0x7c
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a52:	bf00      	nop
 8005a54:	40011000 	.word	0x40011000
 8005a58:	40011400 	.word	0x40011400
 8005a5c:	51eb851f 	.word	0x51eb851f

08005a60 <__libc_init_array>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	4d0d      	ldr	r5, [pc, #52]	; (8005a98 <__libc_init_array+0x38>)
 8005a64:	4c0d      	ldr	r4, [pc, #52]	; (8005a9c <__libc_init_array+0x3c>)
 8005a66:	1b64      	subs	r4, r4, r5
 8005a68:	10a4      	asrs	r4, r4, #2
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	42a6      	cmp	r6, r4
 8005a6e:	d109      	bne.n	8005a84 <__libc_init_array+0x24>
 8005a70:	4d0b      	ldr	r5, [pc, #44]	; (8005aa0 <__libc_init_array+0x40>)
 8005a72:	4c0c      	ldr	r4, [pc, #48]	; (8005aa4 <__libc_init_array+0x44>)
 8005a74:	f000 f820 	bl	8005ab8 <_init>
 8005a78:	1b64      	subs	r4, r4, r5
 8005a7a:	10a4      	asrs	r4, r4, #2
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	42a6      	cmp	r6, r4
 8005a80:	d105      	bne.n	8005a8e <__libc_init_array+0x2e>
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a88:	4798      	blx	r3
 8005a8a:	3601      	adds	r6, #1
 8005a8c:	e7ee      	b.n	8005a6c <__libc_init_array+0xc>
 8005a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a92:	4798      	blx	r3
 8005a94:	3601      	adds	r6, #1
 8005a96:	e7f2      	b.n	8005a7e <__libc_init_array+0x1e>
 8005a98:	08005af8 	.word	0x08005af8
 8005a9c:	08005af8 	.word	0x08005af8
 8005aa0:	08005af8 	.word	0x08005af8
 8005aa4:	08005afc 	.word	0x08005afc

08005aa8 <memset>:
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d100      	bne.n	8005ab2 <memset+0xa>
 8005ab0:	4770      	bx	lr
 8005ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab6:	e7f9      	b.n	8005aac <memset+0x4>

08005ab8 <_init>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr

08005ac4 <_fini>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr
